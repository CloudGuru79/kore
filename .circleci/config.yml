---
version: 2.1

orbs:
  kube-orb: circleci/kubernetes@0.11.0

parameters:
  enable_e2e:
    type: boolean
    default: false

  enable_e2e_master:
    type: boolean
    default: false
    
  enable_gke_e2e:
    type: boolean
    default: true

  enable_eks_e2e:
    type: boolean
    default: false

e2e: &E2E_DEFAULT
  docker:
    - image: circleci/golang:1.14

  parameters:
    enable_e2e:
      type: boolean
      default: false

  environment:
    ENABLE_EKS_E2E: << parameters.enable_e2e >>
    KORE_ADMIN_TOKEN: "password"
    KORE_API_PUBLIC_URL_QA: http://127.0.0.1:10080

e2e_steps: &E2E_DEFAULT_STEPS
  steps:
    - checkout
    - attach_workspace:
        at: bin
    - run:
        name: Installing tools
        command: |
          sudo cp bin/ /bin
          sudo apt install -y bash bats curl jq
    - run:
        name: Waiting for API
        command: |
          curl -s \
            --retry 10 \
            --retry-connrefused \
            --retry-delay 5 \
            ${KORE_API_PUBLIC_URL_QA}/healthz

e2e_gke: &E2E_GKE
  steps:
    - run:
        name: Running E2E Suite
        command: |
          test/e2e/check-suite.sh \
            --enable-e2e-user ${KORE_E2E_USER} \
            --enable-gke true

services: &SERVICES 
  docker:
    - image: circleci/golang:1.14
    - name: etcd
      image: bitnami/etcd:latest
      environment:
        ALLOW_NONE_AUTHENTICATION: "yes"
    - name: database
      image: mariadb:bionic
      environment:
        MYSQL_ROOT_PASSWORD: pass
      command:
        sh -c "
          echo 'CREATE DATABASE IF NOT EXISTS kore;' > /docker-entrypoint-initdb.d/init.sql;
          /usr/local/bin/docker-entrypoint.sh --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci"
    - name: kube-controller-manager
      image: gcr.io/google-containers/kube-controller-manager-amd64:v1.15.11
      command:
        - /usr/local/bin/kube-controller-manager
        - --master=http://kube-apiserver:8080
    - name: kube-apiserver
      image: gcr.io/google-containers/kube-apiserver-amd64:v1.15.11
      command:
        - /usr/local/bin/kube-apiserver
        - --address=0.0.0.0
        - --alsologtostderr
        - --authorization-mode=RBAC
        - --bind-address=0.0.0.0
        - --default-watch-cache-size=200
        - --delete-collection-workers=10
        - --etcd-servers=http://etcd:2379
        - --log-flush-frequency=10s
        - --runtime-config=autoscaling/v1=false
        - --runtime-config=autoscaling/v2beta1=false
        - --runtime-config=autoscaling/v2beta2=false
        - --runtime-config=batch/v1=false
        - --runtime-config=batch/v1beta1=false
        - --runtime-config=networking.k8s.io/v1=false
        - --runtime-config=networking.k8s.io/v1beta1=false
        - --runtime-config=node.k8s.io/v1beta1=false

service_env: &SERVICES_ENV
  KORE_ADMIN_TOKEN: "password"
  KORE_AUTHENTICATION_PLUGINS: "admintoken,localjwt"
  KORE_CERTIFICATE_AUTHORITY: "hack/ca/ca.pem"
  KORE_CERTIFICATE_AUTHORITY_KEY: "hack/ca/ca-key.pem"
  KORE_HMAC: "bdT2Qg6DybsLIwc0TbYWrkGC4auovscg"
  # The below must be matched with the private key in the API test project:
  KORE_LOCAL_JWT_PUBLIC_KEY: "MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAIG6XiNhkwDETU2zk0tGlI0DKlbEJcN4jxwJBqhd3neReLDnqg9SBgKepdy9Nxw5LAd1gNoBkLvdFJg9SbHlM0sCAwEAAQ=="
  KORE_UI_PUBLIC_URL: "http://localhost:3000"
  KUBE_API_SERVER: "http://kube-apiserver:8080"
  USERS_DB_URL: "root:pass@tcp(database:3306)/kore?parseTime=true"

jobs:
  build:
    environment:
      GOFLAGS: "-mod=vendor"
      USE_GIT_VERSION: "true"

    docker:
      - image: circleci/golang:1.14
      - name: database
        image: mariadb:bionic
        environment:
          MYSQL_ROOT_PASSWORD: pass
        command:
          sh -c "
            echo 'CREATE DATABASE IF NOT EXISTS kore;' > /docker-entrypoint-initdb.d/init.sql;
            /usr/local/bin/docker-entrypoint.sh --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci"

    steps:
      - checkout
      - run:
          name: Test
          environment:
            TEST_USERS_DATABASE_URL: "root:pass@tcp(database:3306)/kore?parseTime=true"
          command: |
            make test
      - run:
          name: Build
          command: |
            make build
      - persist_to_workspace:
          root: bin
          paths:
            - auth-proxy
            - kore-apiserver
            - kore-clusterappman
            - kore

  check-apis:
    environment:
      GOFLAGS: "-mod=vendor"
      USE_GIT_VERSION: "true"

    <<: *SERVICES

    steps:
      - checkout
      - run:
          name: Checking generated API resources
          command: |
            make check-apis
      - run:
          command: |
            make kore-apiserver
            bin/kore-apiserver --verbose
          background: true
          environment:
            <<: *SERVICES_ENV

      - run:
          name: Checking swagger
          command: |
            make swagger-json
            make swagger-validate
      - run:
          name: Integration testing API
          command: |
            make check-swagger-apiclient api-test

  release:
    environment:
      GOFLAGS: "-mod=vendor"

    docker:
      - image: circleci/golang:1.14

    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - deploy:
          command: |
            docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD} quay.io
            VERSION=${CIRCLE_TAG:-latest} make images
            VERSION=${CIRCLE_TAG:-latest} make push-images
            # These are used for QA
            VERSION=${CIRCLE_SHA1} make images
            VERSION=${CIRCLE_SHA1} make push-images

  package-release:
    environment:
      GOFLAGS: "-mod=vendor"

    docker:
      - image: circleci/golang:1.14

    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Installing helm
          command: |
            sudo curl -sL https://get.helm.sh/helm-v3.1.2-linux-amd64.tar.gz -o helm.tar.gz
            sudo tar -xzf helm.tar.gz --strip-components=1 -C /bin/ linux-amd64/helm
            sudo chmod +x /bin/helm
      - deploy:
          command: |
            VERSION=${CIRCLE_TAG} make package
            VERSION=${CIRCLE_TAG} make push-release-packages

  build-ui:
    docker:
      - image: node:12
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Testing UI
          working_directory: ~/project/ui
          command: |
            make test
      - run:
          name: Building UI
          working_directory: ~/project/ui
          command: |
            make build

  test-ui:
    environment:
      GOFLAGS: "-mod=vendor"
      USE_GIT_VERSION: "true"

    docker:
      - image: circleci/golang:1.14

      - name: etcd
        image: bitnami/etcd:latest
        environment:
          ALLOW_NONE_AUTHENTICATION: "yes"

      - name: redis
        image: redis:5

      - name: database
        image: mariadb:bionic
        environment:
          MYSQL_ROOT_PASSWORD: pass
        command:
          sh -c "
            echo 'CREATE DATABASE IF NOT EXISTS kore;' > /docker-entrypoint-initdb.d/init.sql;
            /usr/local/bin/docker-entrypoint.sh --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci"

      - name: kube-controller-manager
        image: gcr.io/google-containers/kube-controller-manager-amd64:v1.15.11
        command:
          - /usr/local/bin/kube-controller-manager
          - --master=http://kube-apiserver:8080

      - name: kube-apiserver
        image: gcr.io/google-containers/kube-apiserver-amd64:v1.15.11
        command:
          - /usr/local/bin/kube-apiserver
          - --address=0.0.0.0
          - --alsologtostderr
          - --authorization-mode=RBAC
          - --bind-address=0.0.0.0
          - --default-watch-cache-size=200
          - --delete-collection-workers=10
          - --etcd-servers=http://etcd:2379
          - --log-flush-frequency=10s
          - --runtime-config=autoscaling/v1=false
          - --runtime-config=autoscaling/v2beta1=false
          - --runtime-config=autoscaling/v2beta2=false
          - --runtime-config=batch/v1=false
          - --runtime-config=batch/v1beta1=false
          - --runtime-config=networking.k8s.io/v1=false
          - --runtime-config=networking.k8s.io/v1beta1=false
          - --runtime-config=node.k8s.io/v1beta1=false

    steps:
      - checkout
      - run:
          name: Install Node.js and Headless Chrome dependencies
          command: |
            sudo apt-get update && sudo apt-get install -yq \
              jq gconf-service libasound2 libatk1.0-0 libatk-bridge2.0-0 libc6 libcairo2 libcups2 libdbus-1-3 \
              libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 \
              libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 \
              libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates \
              fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
            curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -
            sudo apt install nodejs
            node --version
            npm --version
      - run:
          name: Running kore-apiserver
          command: |
            make kore-apiserver
            bin/kore-apiserver --verbose
          background: true
          environment:
            KORE_ADMIN_PASS: "password"
            KORE_ADMIN_TOKEN: "password"
            KORE_AUTHENTICATION_PLUGINS: "basicauth,admintoken"
            KORE_CERTIFICATE_AUTHORITY: "hack/ca/ca.pem"
            KORE_CERTIFICATE_AUTHORITY_KEY: "hack/ca/ca-key.pem"
            KORE_HMAC: "bdT2Qg6DybsLIwc0TbYWrkGC4auovscg"
            # The below must be matched with the private key in the API test project:
            KORE_LOCAL_JWT_PUBLIC_KEY: "MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAIG6XiNhkwDETU2zk0tGlI0DKlbEJcN4jxwJBqhd3neReLDnqg9SBgKepdy9Nxw5LAd1gNoBkLvdFJg9SbHlM0sCAwEAAQ=="
            KORE_UI_PUBLIC_URL: "http://localhost:3000"
            KUBE_API_SERVER: "http://kube-apiserver:8080"
            USERS_DB_URL: "root:pass@tcp(database:3306)/kore?parseTime=true"
      - run:
          name: Running kore-ui
          working_directory: ~/project/ui
          command: |
            npm install
            npm run build
            npm start
          background: true
          environment:
            KORE_BASE_URL: http://localhost:3000
            KORE_API_URL: http://localhost:10080/api/v1alpha1
            KORE_API_TOKEN: password
            REDIS_URL: redis://redis:6379
      - run:
          name: Waiting for API and UI
          command: |
            make api-wait
            make ui-wait
      - run:
          name: End-to-end testing UI
          working_directory: ~/project/ui
          environment:
            NODE_ENV: development
          command: |
            npm run test-e2e

  release-ui:
    environment:
      KORE_UI_IMAGE: quay.io/appvia/kore-ui
    docker:
      - image: docker:19.03-dind
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - deploy:
          name: Publishing UI to quay.io
          working_directory: ~/project/ui
          command: |
            docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD} quay.io
            docker build -t ${KORE_UI_IMAGE}:${CIRCLE_TAG:-latest} --build-arg version=${CIRCLE_TAG:-latest} .
            docker build -t ${KORE_UI_IMAGE}:${CIRCLE_SHA1} --build-arg version=${CIRCLE_SHA1} .
            docker push ${KORE_UI_IMAGE}:${CIRCLE_TAG:-latest}
            docker push ${KORE_UI_IMAGE}:${CIRCLE_SHA1}

  release-qa:
    docker:
      - image: alpine/helm:3.1.2
    steps:
      - checkout
      - run:
          name: Installing GNU
          command: |
            apk add bash coreutils curl --update
      - kube-orb/install-kubeconfig:
        kubeconfig: KUBECONFIG_DATA
      - run:
          name: Deploying to QA
          command: |
            export BUILD_ID=${CIRCLE_SHA1}
            export VERSION=${CIRCLE_SHA1}
            echo "Deploying to QA, version: ${VERSION}"
            hack/deploy-qa.sh

  # This releases the local images for kore-apiserver and the auth-proxy; to
  # ensure we have a complete e2e
  e2e-images:
    docker:
      - image: circleci/golang:1.14
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Releasing E2E Images
          command: |
            docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD} quay.io
            VERSION=${CIRCLE_SHA1} make images
            VERSION=${CIRCLE_SHA1} make push-images

  e2e:
    <<: *SERVICES

    environment:
      GOFLAGS: "-mod=vendor"
      KORE_API_PUBLIC_URL_QA: http://127.0.0.1:10080

    steps:
      - checkout
      - run:
          name: Building binaries
          command: |
            make kore-apiserver
            make kore
            sudo mv bin/kore /bin
      - run:
          name: Installing kubectl
          command: |
            sudo curl -sL https://storage.googleapis.com/kubernetes-release/release/v1.15.11/bin/linux/amd64/kubectl -o bin/kubectl
            sudo chmod +x bin/kubectl
      - persist_to_workspace:
          root: bin
          paths:
            - kore
            - kubectl
      - run:
          name: Running the Kore API
          command: |
            export AUTH_PROXY_IMAGE="quay.io/appvia/auth-proxy:${CIRCLE_SHA1}"
            export CLUSTERAPPMAN_IMAGE="quay.io/appvia/kore-apiserver:${CIRCLE_SHA1}"
            bin/kore-apiserver --disable-json-logging --verbose
          background: true
          environment:
            <<: *SERVICES_ENV

  e2e-gke:
    <<: *E2E_DEFAULT
    steps:
      - when:
          condition: << parameters.enable_e2e >>
          steps:
            <<: [*E2E_DEFAULT_STEPS, *E2E_GKE]

  e2e-eks:
    <<: *E2E_DEFAULT
    steps:
      - when:
          condition: << parameters.enable_e2e >>
          steps:
            <<: [*E2E_DEFAULT_STEPS, *E2E_GKE]

workflows:
  version: 2.1
  workflow:
    unless: << pipeline.parameters.enable_e2e >>
    jobs:
      - build:
          filters:
            tags:
              only: /^v.*$/
      - check-apis:
          filters:
            tags:
              only: /^v.*$/
      - release:
          requires:
            - build
            - check-apis
          filters:
            branches:
              only: master
            tags:
              only: /^v.*$/
      - package-release:
          requires:
            - build
            - check-apis
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*$/
      - build-ui:
          filters:
            tags:
              only: /^v.*$/
      - test-ui:
          filters:
            tags:
              only: /^v.*$/
      - release-ui:
          filters:
            branches:
              only: master
            tags:
              only: /^v.*$/
          requires:
            - build-ui
            - test-ui
      - release-qa:
          filters:
            branches:
              only: master
          requires:
            - release
            - release-ui

  e2e:
    when: << pipeline.parameters.enable_e2e >>
    jobs:
      - e2e-images:
          filters:
            branches:
              ignore: master
      - e2e:
          filters:
            branches:
              ignore: master
          requires:
            - e2e-images
      - e2e-gke:
          enable_e2e: << pipeline.parameters.enable_gke_e2e >>
          filters:
            branches:
              ignore: master
          requires:
            - e2e
      - e2e-eks:
          enable_e2e: << pipeline.parameters.enable_eks_e2e >>
          filters:
            branches:
              ignore: master
          requires:
            - e2e

  e2e_master:
    when: << pipeline.parameters.enable_e2e_master >>
    jobs:
      - e2e:
          filters:
            branches:
              only: master
