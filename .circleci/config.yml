---
version: 2

jobs:
  build:
    environment:
      USE_GIT_VERSION: "true"
      GOFLAGS: "-mod=vendor"

    docker:
      - image: circleci/golang:1.13

      - name: database
        image: mariadb:bionic
        environment:
          MYSQL_ROOT_PASSWORD: pass
        command:
          sh -c "
            echo 'CREATE DATABASE IF NOT EXISTS kore;' > /docker-entrypoint-initdb.d/init.sql;
            /usr/local/bin/docker-entrypoint.sh --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci"

    steps:
      - checkout
      - run:
          name: Test
          environment:
            TEST_USERS_DATABASE_URL: "root:pass@tcp(database:3306)/kore?parseTime=true"
          command: |
            make test
      - run:
          name: Build
          command: |
            make build
      - persist_to_workspace:
          root: bin
          paths:
            - auth-proxy
            - kore-apiserver
            - kore-clusterappman

  check-apis:
    environment:
      USE_GIT_VERSION: "true"
      GOFLAGS: "-mod=vendor"

    docker:
      - image: circleci/golang:1.13

      - name: etcd
        image: bitnami/etcd:latest
        environment:
          ALLOW_NONE_AUTHENTICATION: "yes"

      - name: database
        image: mariadb:bionic
        environment:
          MYSQL_ROOT_PASSWORD: pass
        command:
          sh -c "
            echo 'CREATE DATABASE IF NOT EXISTS kore;' > /docker-entrypoint-initdb.d/init.sql;
            /usr/local/bin/docker-entrypoint.sh --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci"

      - name: kube-controller-manager
        image: mirrorgooglecontainers/kube-controller-manager-amd64:v1.14.8
        command:
          - /usr/local/bin/kube-controller-manager
          - --master=http://kube-apiserver:8080

      - name: kube-apiserver
        image: mirrorgooglecontainers/kube-apiserver-amd64:v1.14.8
        command:
          - /usr/local/bin/kube-apiserver
          - --address=0.0.0.0
          - --alsologtostderr
          - --authorization-mode=RBAC
          - --bind-address=0.0.0.0
          - --default-watch-cache-size=200
          - --delete-collection-workers=10
          - --etcd-servers=http://etcd:2379
          - --log-flush-frequency=10s
          - --runtime-config=autoscaling/v1=false
          - --runtime-config=autoscaling/v2beta1=false
          - --runtime-config=autoscaling/v2beta2=false
          - --runtime-config=batch/v1=false
          - --runtime-config=batch/v1beta1=false
          - --runtime-config=networking.k8s.io/v1=false
          - --runtime-config=networking.k8s.io/v1beta1=false
          - --runtime-config=node.k8s.io/v1beta1=false

    steps:
      - checkout
      - run:
          name: Checking generated API resources
          command: |
            make check-apis
      - run:
          command: |
            make kore-apiserver
            bin/kore-apiserver --verbose
          background: true
          environment:
            KORE_ADMIN_TOKEN: "password"
            KORE_AUTHENTICATION_PLUGINS: "admintoken"
            KORE_CERTIFICATE_AUTHORITY: "hack/ca/ca.pem"
            KORE_CERTIFICATE_AUTHORITY_KEY: "hack/ca/ca-key.pem"
            KORE_HMAC: "bdT2Qg6DybsLIwc0TbYWrkGC4auovscg"
            KUBE_API_SERVER: "http://kube-apiserver:8080"
            KORE_UI_PUBLIC_URL: "http://localhost:3000"
            USERS_DB_URL: "root:pass@tcp(database:3306)/kore?parseTime=true"
      - run:
          name: Checking swagger
          command: |
            make swagger-json
            make swagger-validate

  release:
    environment:
      GOFLAGS: "-mod=vendor"
      KORE_API_IMAGE: quay.io/appvia/kore-apiserver
      KORE_PROXY_IMAGE: quay.io/appvia/auth-proxy

    docker:
      - image: circleci/golang:1.13

    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: bin
      - deploy:
          command: |
            docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD} quay.io
            docker build -t ${KORE_API_IMAGE}:${CIRCLE_TAG:-latest}   -f images/Dockerfile.kore-apiserver .
            docker build -t ${KORE_PROXY_IMAGE}:${CIRCLE_TAG:-latest} -f images/Dockerfile.auth-proxy .
            docker push ${KORE_API_IMAGE}:${CIRCLE_TAG:-latest}
            docker push ${KORE_PROXY_IMAGE}:${CIRCLE_TAG:-latest}

  build-ui:
    docker:
      - image: node:12
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - deploy:
          name: Building and testing UI
          working_directory: ~/project/ui
          command: |
            npm install
            npm run lint
            npm test
            npm run build

  release-ui:
    docker:
      - image: docker:19.03-dind
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - deploy:
          name: Publishing UI to quay.io
          working_directory: ~/project/ui
          command: |
              docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD} quay.io
              docker build -t quay.io/appvia/kore-ui:${CIRCLE_TAG:-latest} .
              docker push quay.io/appvia/kore-ui:${CIRCLE_TAG:-latest}

workflows:
  version: 2
  workflow:
    jobs:
      - build:
          filters:
            tags:
              only: /^v.*$/
      - check-apis:
          filters:
            tags:
              only: /^v.*$/
      - release:
          requires:
            - build
            - check-apis
          filters:
            branches:
              only: master
            tags:
              only: /^v.*$/
      - build-ui:
          filters:
            tags:
              only: /^v.*$/
      - release-ui:
          filters:
            branches:
              only: master
            tags:
              only: /^v.*$/
          requires:
            - build-ui
