// +build !ignore_autogenerated

/**
 * Copyright 2020 Appvia Ltd <info@appvia.io>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/appvia/kore/pkg/apis/gcp/v1alpha1.Organization":       schema_pkg_apis_gcp_v1alpha1_Organization(ref),
		"github.com/appvia/kore/pkg/apis/gcp/v1alpha1.OrganizationSpec":   schema_pkg_apis_gcp_v1alpha1_OrganizationSpec(ref),
		"github.com/appvia/kore/pkg/apis/gcp/v1alpha1.OrganizationStatus": schema_pkg_apis_gcp_v1alpha1_OrganizationStatus(ref),
		"github.com/appvia/kore/pkg/apis/gcp/v1alpha1.Project":            schema_pkg_apis_gcp_v1alpha1_Project(ref),
		"github.com/appvia/kore/pkg/apis/gcp/v1alpha1.ProjectClaim":       schema_pkg_apis_gcp_v1alpha1_ProjectClaim(ref),
		"github.com/appvia/kore/pkg/apis/gcp/v1alpha1.ProjectClaimSpec":   schema_pkg_apis_gcp_v1alpha1_ProjectClaimSpec(ref),
		"github.com/appvia/kore/pkg/apis/gcp/v1alpha1.ProjectClaimStatus": schema_pkg_apis_gcp_v1alpha1_ProjectClaimStatus(ref),
		"github.com/appvia/kore/pkg/apis/gcp/v1alpha1.ProjectSpec":        schema_pkg_apis_gcp_v1alpha1_ProjectSpec(ref),
		"github.com/appvia/kore/pkg/apis/gcp/v1alpha1.ProjectStatus":      schema_pkg_apis_gcp_v1alpha1_ProjectStatus(ref),
	}
}

func schema_pkg_apis_gcp_v1alpha1_Organization(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Organization is the Schema for the organization API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/appvia/kore/pkg/apis/gcp/v1alpha1.OrganizationSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/appvia/kore/pkg/apis/gcp/v1alpha1.OrganizationStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/appvia/kore/pkg/apis/gcp/v1alpha1.OrganizationSpec", "github.com/appvia/kore/pkg/apis/gcp/v1alpha1.OrganizationStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_gcp_v1alpha1_OrganizationSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OrganizationSpec defines the desired state of Organization",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"parentType": {
						SchemaProps: spec.SchemaProps{
							Description: "ParentType is the type of parent this project has Valid types are: \"organization\", \"folder\", and \"project\"",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"parentID": {
						SchemaProps: spec.SchemaProps{
							Description: "ParentID is the type specific ID of the parent this project has",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"billingAccount": {
						SchemaProps: spec.SchemaProps{
							Description: "BillingAccountName is the resource name of the billing account associated with the project e.g. '012345-567890-ABCDEF'",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"serviceAccount": {
						SchemaProps: spec.SchemaProps{
							Description: "ServiceAccount is the name used when creating the service account e.g. 'hub-admin'",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"tokenRef": {
						SchemaProps: spec.SchemaProps{
							Description: "TokenRef is a reference to an ephemeral oauth token used provision the admin project",
							Ref:         ref("k8s.io/api/core/v1.SecretReference"),
						},
					},
					"credentialsRef": {
						SchemaProps: spec.SchemaProps{
							Description: "CredentialsRef is a reference to the credentials used to provision provision the projects - this is either created by dynamically from the oauth token or provided for us",
							Ref:         ref("k8s.io/api/core/v1.SecretReference"),
						},
					},
				},
				Required: []string{"parentType", "parentID", "billingAccount", "serviceAccount", "credentialsRef"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.SecretReference"},
	}
}

func schema_pkg_apis_gcp_v1alpha1_OrganizationStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OrganizationStatus defines the observed state of Organization",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is a set of components conditions",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/appvia/kore/pkg/apis/core/v1.Component"),
									},
								},
							},
						},
					},
					"projectID": {
						SchemaProps: spec.SchemaProps{
							Description: "Project is the GCP project ID",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status provides a overall status",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/appvia/kore/pkg/apis/core/v1.Component"},
	}
}

func schema_pkg_apis_gcp_v1alpha1_Project(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Project is the Schema for the ProjectClaims API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/appvia/kore/pkg/apis/gcp/v1alpha1.ProjectSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/appvia/kore/pkg/apis/gcp/v1alpha1.ProjectStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/appvia/kore/pkg/apis/gcp/v1alpha1.ProjectSpec", "github.com/appvia/kore/pkg/apis/gcp/v1alpha1.ProjectStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_gcp_v1alpha1_ProjectClaim(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ProjectClaim is the Schema for the ProjectClaims API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/appvia/kore/pkg/apis/gcp/v1alpha1.ProjectClaimSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/appvia/kore/pkg/apis/gcp/v1alpha1.ProjectClaimStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/appvia/kore/pkg/apis/gcp/v1alpha1.ProjectClaimSpec", "github.com/appvia/kore/pkg/apis/gcp/v1alpha1.ProjectClaimStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_gcp_v1alpha1_ProjectClaimSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ProjectClaimSpec defines the desired state of ProjectClaim",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"projectName": {
						SchemaProps: spec.SchemaProps{
							Description: "ProjectName is the name of the project to create",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"organization": {
						SchemaProps: spec.SchemaProps{
							Description: "Organization isthe GCP organization",
							Ref:         ref("github.com/appvia/kore/pkg/apis/core/v1.Ownership"),
						},
					},
				},
				Required: []string{"projectName", "organization"},
			},
		},
		Dependencies: []string{
			"github.com/appvia/kore/pkg/apis/core/v1.Ownership"},
	}
}

func schema_pkg_apis_gcp_v1alpha1_ProjectClaimStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ProjectClaimStatus defines the observed state of GCP Project",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"credentialRef": {
						SchemaProps: spec.SchemaProps{
							Description: "CredentialRef is the reference to the credentials secret",
							Ref:         ref("k8s.io/api/core/v1.SecretReference"),
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is a set of components conditions",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/appvia/kore/pkg/apis/core/v1.Component"),
									},
								},
							},
						},
					},
					"projectID": {
						SchemaProps: spec.SchemaProps{
							Description: "ProjectID is the project id",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"projectRef": {
						SchemaProps: spec.SchemaProps{
							Description: "ProjectRef is a reference to the underlying project",
							Ref:         ref("github.com/appvia/kore/pkg/apis/core/v1.Ownership"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status provides a overall status",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/appvia/kore/pkg/apis/core/v1.Component", "github.com/appvia/kore/pkg/apis/core/v1.Ownership", "k8s.io/api/core/v1.SecretReference"},
	}
}

func schema_pkg_apis_gcp_v1alpha1_ProjectSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ProjectSpec defines the desired state of ProjectClaim",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"projectName": {
						SchemaProps: spec.SchemaProps{
							Description: "ProjectName is the name of the project to create. We do this internally so we can easily change the project name without changing the resource name",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"organization": {
						SchemaProps: spec.SchemaProps{
							Description: "Organization is a reference to the gcp admin project to use",
							Ref:         ref("github.com/appvia/kore/pkg/apis/core/v1.Ownership"),
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Labels are a set of labels on the project",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"projectName", "organization"},
			},
		},
		Dependencies: []string{
			"github.com/appvia/kore/pkg/apis/core/v1.Ownership"},
	}
}

func schema_pkg_apis_gcp_v1alpha1_ProjectStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ProjectStatus defines the observed state of GCP Project",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"credentialRef": {
						SchemaProps: spec.SchemaProps{
							Description: "CredentialRef is the reference to the credentials secret",
							Ref:         ref("k8s.io/api/core/v1.SecretReference"),
						},
					},
					"projectID": {
						SchemaProps: spec.SchemaProps{
							Description: "ProjectID is the project id",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status provides a overall status",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is a set of components conditions",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/appvia/kore/pkg/apis/core/v1.Component"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/appvia/kore/pkg/apis/core/v1.Component", "k8s.io/api/core/v1.SecretReference"},
	}
}
