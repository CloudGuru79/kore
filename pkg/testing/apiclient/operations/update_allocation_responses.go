// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/appvia/kore/pkg/testing/apimodels"
)

// UpdateAllocationReader is a Reader for the UpdateAllocation structure.
type UpdateAllocationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAllocationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateAllocationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewUpdateAllocationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateAllocationOK creates a UpdateAllocationOK with default headers values
func NewUpdateAllocationOK() *UpdateAllocationOK {
	return &UpdateAllocationOK{}
}

/*UpdateAllocationOK handles this case with default header values.

Contains the former team definition from the kore
*/
type UpdateAllocationOK struct {
	Payload *apimodels.V1Allocation
}

func (o *UpdateAllocationOK) Error() string {
	return fmt.Sprintf("[PUT /api/v1alpha1/teams/{team}/allocations/{name}][%d] updateAllocationOK  %+v", 200, o.Payload)
}

func (o *UpdateAllocationOK) GetPayload() *apimodels.V1Allocation {
	return o.Payload
}

func (o *UpdateAllocationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(apimodels.V1Allocation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAllocationInternalServerError creates a UpdateAllocationInternalServerError with default headers values
func NewUpdateAllocationInternalServerError() *UpdateAllocationInternalServerError {
	return &UpdateAllocationInternalServerError{}
}

/*UpdateAllocationInternalServerError handles this case with default header values.

A generic API error containing the cause of the error
*/
type UpdateAllocationInternalServerError struct {
	Payload *apimodels.ApiserverError
}

func (o *UpdateAllocationInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v1alpha1/teams/{team}/allocations/{name}][%d] updateAllocationInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateAllocationInternalServerError) GetPayload() *apimodels.ApiserverError {
	return o.Payload
}

func (o *UpdateAllocationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(apimodels.ApiserverError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
