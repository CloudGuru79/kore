// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewInviteUserParams creates a new InviteUserParams object
// with the default values initialized.
func NewInviteUserParams() *InviteUserParams {
	var (
		expireDefault = string("1h")
	)
	return &InviteUserParams{
		Expire: &expireDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewInviteUserParamsWithTimeout creates a new InviteUserParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewInviteUserParamsWithTimeout(timeout time.Duration) *InviteUserParams {
	var (
		expireDefault = string("1h")
	)
	return &InviteUserParams{
		Expire: &expireDefault,

		timeout: timeout,
	}
}

// NewInviteUserParamsWithContext creates a new InviteUserParams object
// with the default values initialized, and the ability to set a context for a request
func NewInviteUserParamsWithContext(ctx context.Context) *InviteUserParams {
	var (
		expireDefault = string("1h")
	)
	return &InviteUserParams{
		Expire: &expireDefault,

		Context: ctx,
	}
}

// NewInviteUserParamsWithHTTPClient creates a new InviteUserParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewInviteUserParamsWithHTTPClient(client *http.Client) *InviteUserParams {
	var (
		expireDefault = string("1h")
	)
	return &InviteUserParams{
		Expire:     &expireDefault,
		HTTPClient: client,
	}
}

/*InviteUserParams contains all the parameters to send to the API endpoint
for the invite user operation typically these are written to a http.Request
*/
type InviteUserParams struct {

	/*Expire
	  The expiration of the generated link

	*/
	Expire *string
	/*Team
	  The name of the team you are creating an invition

	*/
	Team string
	/*User
	  The name of the username of the user the invitation is for

	*/
	User string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the invite user params
func (o *InviteUserParams) WithTimeout(timeout time.Duration) *InviteUserParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the invite user params
func (o *InviteUserParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the invite user params
func (o *InviteUserParams) WithContext(ctx context.Context) *InviteUserParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the invite user params
func (o *InviteUserParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the invite user params
func (o *InviteUserParams) WithHTTPClient(client *http.Client) *InviteUserParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the invite user params
func (o *InviteUserParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithExpire adds the expire to the invite user params
func (o *InviteUserParams) WithExpire(expire *string) *InviteUserParams {
	o.SetExpire(expire)
	return o
}

// SetExpire adds the expire to the invite user params
func (o *InviteUserParams) SetExpire(expire *string) {
	o.Expire = expire
}

// WithTeam adds the team to the invite user params
func (o *InviteUserParams) WithTeam(team string) *InviteUserParams {
	o.SetTeam(team)
	return o
}

// SetTeam adds the team to the invite user params
func (o *InviteUserParams) SetTeam(team string) {
	o.Team = team
}

// WithUser adds the user to the invite user params
func (o *InviteUserParams) WithUser(user string) *InviteUserParams {
	o.SetUser(user)
	return o
}

// SetUser adds the user to the invite user params
func (o *InviteUserParams) SetUser(user string) {
	o.User = user
}

// WriteToRequest writes these params to a swagger request
func (o *InviteUserParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Expire != nil {

		// query param expire
		var qrExpire string
		if o.Expire != nil {
			qrExpire = *o.Expire
		}
		qExpire := qrExpire
		if qExpire != "" {
			if err := r.SetQueryParam("expire", qExpire); err != nil {
				return err
			}
		}

	}

	// path param team
	if err := r.SetPathParam("team", o.Team); err != nil {
		return err
	}

	// path param user
	if err := r.SetPathParam("user", o.User); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
