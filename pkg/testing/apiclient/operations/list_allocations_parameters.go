// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewListAllocationsParams creates a new ListAllocationsParams object
// with the default values initialized.
func NewListAllocationsParams() *ListAllocationsParams {
	var ()
	return &ListAllocationsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListAllocationsParamsWithTimeout creates a new ListAllocationsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListAllocationsParamsWithTimeout(timeout time.Duration) *ListAllocationsParams {
	var ()
	return &ListAllocationsParams{

		timeout: timeout,
	}
}

// NewListAllocationsParamsWithContext creates a new ListAllocationsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListAllocationsParamsWithContext(ctx context.Context) *ListAllocationsParams {
	var ()
	return &ListAllocationsParams{

		Context: ctx,
	}
}

// NewListAllocationsParamsWithHTTPClient creates a new ListAllocationsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListAllocationsParamsWithHTTPClient(client *http.Client) *ListAllocationsParams {
	var ()
	return &ListAllocationsParams{
		HTTPClient: client,
	}
}

/*ListAllocationsParams contains all the parameters to send to the API endpoint
for the list allocations operation typically these are written to a http.Request
*/
type ListAllocationsParams struct {

	/*Assigned
	  Retrieves all allocations which have been assigned to you

	*/
	Assigned *string
	/*Team
	  Is the name of the team you are acting within

	*/
	Team string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list allocations params
func (o *ListAllocationsParams) WithTimeout(timeout time.Duration) *ListAllocationsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list allocations params
func (o *ListAllocationsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list allocations params
func (o *ListAllocationsParams) WithContext(ctx context.Context) *ListAllocationsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list allocations params
func (o *ListAllocationsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list allocations params
func (o *ListAllocationsParams) WithHTTPClient(client *http.Client) *ListAllocationsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list allocations params
func (o *ListAllocationsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAssigned adds the assigned to the list allocations params
func (o *ListAllocationsParams) WithAssigned(assigned *string) *ListAllocationsParams {
	o.SetAssigned(assigned)
	return o
}

// SetAssigned adds the assigned to the list allocations params
func (o *ListAllocationsParams) SetAssigned(assigned *string) {
	o.Assigned = assigned
}

// WithTeam adds the team to the list allocations params
func (o *ListAllocationsParams) WithTeam(team string) *ListAllocationsParams {
	o.SetTeam(team)
	return o
}

// SetTeam adds the team to the list allocations params
func (o *ListAllocationsParams) SetTeam(team string) {
	o.Team = team
}

// WriteToRequest writes these params to a swagger request
func (o *ListAllocationsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Assigned != nil {

		// query param assigned
		var qrAssigned string
		if o.Assigned != nil {
			qrAssigned = *o.Assigned
		}
		qAssigned := qrAssigned
		if qAssigned != "" {
			if err := r.SetQueryParam("assigned", qAssigned); err != nil {
				return err
			}
		}

	}

	// path param team
	if err := r.SetPathParam("team", o.Team); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
