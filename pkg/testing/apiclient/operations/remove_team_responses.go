// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/appvia/kore/pkg/testing/apimodels"
)

// RemoveTeamReader is a Reader for the RemoveTeam structure.
type RemoveTeamReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RemoveTeamReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRemoveTeamOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewRemoveTeamNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewRemoveTeamNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRemoveTeamInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRemoveTeamOK creates a RemoveTeamOK with default headers values
func NewRemoveTeamOK() *RemoveTeamOK {
	return &RemoveTeamOK{}
}

/*RemoveTeamOK handles this case with default header values.

Contains the former team definition from the kore
*/
type RemoveTeamOK struct {
	Payload *apimodels.V1Team
}

func (o *RemoveTeamOK) Error() string {
	return fmt.Sprintf("[DELETE /api/v1alpha1/teams/{team}][%d] removeTeamOK  %+v", 200, o.Payload)
}

func (o *RemoveTeamOK) GetPayload() *apimodels.V1Team {
	return o.Payload
}

func (o *RemoveTeamOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(apimodels.V1Team)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveTeamNotFound creates a RemoveTeamNotFound with default headers values
func NewRemoveTeamNotFound() *RemoveTeamNotFound {
	return &RemoveTeamNotFound{}
}

/*RemoveTeamNotFound handles this case with default header values.

Team does not exist
*/
type RemoveTeamNotFound struct {
}

func (o *RemoveTeamNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v1alpha1/teams/{team}][%d] removeTeamNotFound ", 404)
}

func (o *RemoveTeamNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRemoveTeamNotAcceptable creates a RemoveTeamNotAcceptable with default headers values
func NewRemoveTeamNotAcceptable() *RemoveTeamNotAcceptable {
	return &RemoveTeamNotAcceptable{}
}

/*RemoveTeamNotAcceptable handles this case with default header values.

Indicates you cannot delete the team for one or more reasons
*/
type RemoveTeamNotAcceptable struct {
	Payload *apimodels.ApiserverError
}

func (o *RemoveTeamNotAcceptable) Error() string {
	return fmt.Sprintf("[DELETE /api/v1alpha1/teams/{team}][%d] removeTeamNotAcceptable  %+v", 406, o.Payload)
}

func (o *RemoveTeamNotAcceptable) GetPayload() *apimodels.ApiserverError {
	return o.Payload
}

func (o *RemoveTeamNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(apimodels.ApiserverError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveTeamInternalServerError creates a RemoveTeamInternalServerError with default headers values
func NewRemoveTeamInternalServerError() *RemoveTeamInternalServerError {
	return &RemoveTeamInternalServerError{}
}

/*RemoveTeamInternalServerError handles this case with default header values.

A generic API error containing the cause of the error
*/
type RemoveTeamInternalServerError struct {
	Payload *apimodels.ApiserverError
}

func (o *RemoveTeamInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/v1alpha1/teams/{team}][%d] removeTeamInternalServerError  %+v", 500, o.Payload)
}

func (o *RemoveTeamInternalServerError) GetPayload() *apimodels.ApiserverError {
	return o.Payload
}

func (o *RemoveTeamInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(apimodels.ApiserverError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
