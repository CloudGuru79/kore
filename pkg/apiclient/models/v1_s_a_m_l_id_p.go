// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1SAMLIDP v1 s a m l ID p
//
// swagger:model v1.SAMLIDP
type V1SAMLIDP struct {

	// allowed groups
	AllowedGroups []string `json:"allowedGroups"`

	// ca data
	// Required: true
	CaData *string `json:"caData"`

	// email attr
	// Required: true
	EmailAttr *string `json:"emailAttr"`

	// groups attr
	GroupsAttr string `json:"groupsAttr,omitempty"`

	// groups delim
	GroupsDelim string `json:"groupsDelim,omitempty"`

	// sso URL
	// Required: true
	SsoURL *string `json:"ssoURL"`

	// username attr
	// Required: true
	UsernameAttr *string `json:"usernameAttr"`
}

// Validate validates this v1 s a m l ID p
func (m *V1SAMLIDP) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCaData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailAttr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSsoURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsernameAttr(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SAMLIDP) validateCaData(formats strfmt.Registry) error {

	if err := validate.Required("caData", "body", m.CaData); err != nil {
		return err
	}

	return nil
}

func (m *V1SAMLIDP) validateEmailAttr(formats strfmt.Registry) error {

	if err := validate.Required("emailAttr", "body", m.EmailAttr); err != nil {
		return err
	}

	return nil
}

func (m *V1SAMLIDP) validateSsoURL(formats strfmt.Registry) error {

	if err := validate.Required("ssoURL", "body", m.SsoURL); err != nil {
		return err
	}

	return nil
}

func (m *V1SAMLIDP) validateUsernameAttr(formats strfmt.Registry) error {

	if err := validate.Required("usernameAttr", "body", m.UsernameAttr); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1SAMLIDP) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1SAMLIDP) UnmarshalBinary(b []byte) error {
	var res V1SAMLIDP
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
