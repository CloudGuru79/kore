// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1alpha1EKSCredentialsSpec v1alpha1 e k s credentials spec
//
// swagger:model v1alpha1.EKSCredentialsSpec
type V1alpha1EKSCredentialsSpec struct {

	// access key ID
	AccessKeyID string `json:"accessKeyID,omitempty"`

	// account ID
	// Required: true
	AccountID *string `json:"accountID"`

	// credentials ref
	// Required: true
	CredentialsRef *V1SecretReference `json:"credentialsRef"`

	// secret access key
	SecretAccessKey string `json:"secretAccessKey,omitempty"`
}

// Validate validates this v1alpha1 e k s credentials spec
func (m *V1alpha1EKSCredentialsSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentialsRef(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1EKSCredentialsSpec) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("accountID", "body", m.AccountID); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1EKSCredentialsSpec) validateCredentialsRef(formats strfmt.Registry) error {

	if err := validate.Required("credentialsRef", "body", m.CredentialsRef); err != nil {
		return err
	}

	if m.CredentialsRef != nil {
		if err := m.CredentialsRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentialsRef")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1alpha1EKSCredentialsSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1alpha1EKSCredentialsSpec) UnmarshalBinary(b []byte) error {
	var res V1alpha1EKSCredentialsSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
