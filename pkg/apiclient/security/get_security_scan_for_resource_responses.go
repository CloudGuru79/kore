// Code generated by go-swagger; DO NOT EDIT.

package security

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/appvia/kore/pkg/apiclient/models"
)

// GetSecurityScanForResourceReader is a Reader for the GetSecurityScanForResource structure.
type GetSecurityScanForResourceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSecurityScanForResourceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSecurityScanForResourceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetSecurityScanForResourceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSecurityScanForResourceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSecurityScanForResourceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSecurityScanForResourceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSecurityScanForResourceOK creates a GetSecurityScanForResourceOK with default headers values
func NewGetSecurityScanForResourceOK() *GetSecurityScanForResourceOK {
	return &GetSecurityScanForResourceOK{}
}

/*GetSecurityScanForResourceOK handles this case with default header values.

Latest security scan for this resource
*/
type GetSecurityScanForResourceOK struct {
	Payload *models.V1SecurityScanResult
}

func (o *GetSecurityScanForResourceOK) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/securityscans/{group}/{version}/{kind}/{namespace}/{name}][%d] getSecurityScanForResourceOK  %+v", 200, o.Payload)
}

func (o *GetSecurityScanForResourceOK) GetPayload() *models.V1SecurityScanResult {
	return o.Payload
}

func (o *GetSecurityScanForResourceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1SecurityScanResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSecurityScanForResourceUnauthorized creates a GetSecurityScanForResourceUnauthorized with default headers values
func NewGetSecurityScanForResourceUnauthorized() *GetSecurityScanForResourceUnauthorized {
	return &GetSecurityScanForResourceUnauthorized{}
}

/*GetSecurityScanForResourceUnauthorized handles this case with default header values.

If not authenticated
*/
type GetSecurityScanForResourceUnauthorized struct {
}

func (o *GetSecurityScanForResourceUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/securityscans/{group}/{version}/{kind}/{namespace}/{name}][%d] getSecurityScanForResourceUnauthorized ", 401)
}

func (o *GetSecurityScanForResourceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSecurityScanForResourceForbidden creates a GetSecurityScanForResourceForbidden with default headers values
func NewGetSecurityScanForResourceForbidden() *GetSecurityScanForResourceForbidden {
	return &GetSecurityScanForResourceForbidden{}
}

/*GetSecurityScanForResourceForbidden handles this case with default header values.

If authenticated but not authorized
*/
type GetSecurityScanForResourceForbidden struct {
}

func (o *GetSecurityScanForResourceForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/securityscans/{group}/{version}/{kind}/{namespace}/{name}][%d] getSecurityScanForResourceForbidden ", 403)
}

func (o *GetSecurityScanForResourceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSecurityScanForResourceNotFound creates a GetSecurityScanForResourceNotFound with default headers values
func NewGetSecurityScanForResourceNotFound() *GetSecurityScanForResourceNotFound {
	return &GetSecurityScanForResourceNotFound{}
}

/*GetSecurityScanForResourceNotFound handles this case with default header values.

No current security scan exists for the resource
*/
type GetSecurityScanForResourceNotFound struct {
}

func (o *GetSecurityScanForResourceNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/securityscans/{group}/{version}/{kind}/{namespace}/{name}][%d] getSecurityScanForResourceNotFound ", 404)
}

func (o *GetSecurityScanForResourceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSecurityScanForResourceInternalServerError creates a GetSecurityScanForResourceInternalServerError with default headers values
func NewGetSecurityScanForResourceInternalServerError() *GetSecurityScanForResourceInternalServerError {
	return &GetSecurityScanForResourceInternalServerError{}
}

/*GetSecurityScanForResourceInternalServerError handles this case with default header values.

A generic API error containing the cause of the error
*/
type GetSecurityScanForResourceInternalServerError struct {
	Payload *models.ApiserverError
}

func (o *GetSecurityScanForResourceInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/securityscans/{group}/{version}/{kind}/{namespace}/{name}][%d] getSecurityScanForResourceInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSecurityScanForResourceInternalServerError) GetPayload() *models.ApiserverError {
	return o.Payload
}

func (o *GetSecurityScanForResourceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ApiserverError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
