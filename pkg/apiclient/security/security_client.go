// Code generated by go-swagger; DO NOT EDIT.

package security

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new security API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for security API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetSecurityOverview(params *GetSecurityOverviewParams, authInfo runtime.ClientAuthInfoWriter) (*GetSecurityOverviewOK, error)

	GetSecurityRule(params *GetSecurityRuleParams, authInfo runtime.ClientAuthInfoWriter) (*GetSecurityRuleOK, error)

	GetSecurityScan(params *GetSecurityScanParams, authInfo runtime.ClientAuthInfoWriter) (*GetSecurityScanOK, error)

	GetSecurityScanForResource(params *GetSecurityScanForResourceParams, authInfo runtime.ClientAuthInfoWriter) (*GetSecurityScanForResourceOK, error)

	ListSecurityRules(params *ListSecurityRulesParams, authInfo runtime.ClientAuthInfoWriter) (*ListSecurityRulesOK, error)

	ListSecurityScans(params *ListSecurityScansParams, authInfo runtime.ClientAuthInfoWriter) (*ListSecurityScansOK, error)

	ListSecurityScansForResource(params *ListSecurityScansForResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ListSecurityScansForResourceOK, error)

	StoreSecurityScanForResource(params *StoreSecurityScanForResourceParams, authInfo runtime.ClientAuthInfoWriter) (*StoreSecurityScanForResourceOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetSecurityOverview useds to return a summary of the security overview for the entire kore estate
*/
func (a *Client) GetSecurityOverview(params *GetSecurityOverviewParams, authInfo runtime.ClientAuthInfoWriter) (*GetSecurityOverviewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecurityOverviewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSecurityOverview",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/securityscans/overview",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSecurityOverviewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSecurityOverviewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSecurityOverview: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSecurityRule useds to return details of a specific security rule within the system
*/
func (a *Client) GetSecurityRule(params *GetSecurityRuleParams, authInfo runtime.ClientAuthInfoWriter) (*GetSecurityRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecurityRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSecurityRule",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/securityrules/{code}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSecurityRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSecurityRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSecurityRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSecurityScan useds to return specific security scan by ID
*/
func (a *Client) GetSecurityScan(params *GetSecurityScanParams, authInfo runtime.ClientAuthInfoWriter) (*GetSecurityScanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecurityScanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSecurityScan",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/securityscans/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSecurityScanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSecurityScanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSecurityScan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSecurityScanForResource useds to return latest security scan for specific object in the system
*/
func (a *Client) GetSecurityScanForResource(params *GetSecurityScanForResourceParams, authInfo runtime.ClientAuthInfoWriter) (*GetSecurityScanForResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecurityScanForResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSecurityScanForResource",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/securityscans/{group}/{version}/{kind}/{namespace}/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSecurityScanForResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSecurityScanForResourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSecurityScanForResource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListSecurityRules useds to return a list of all the security rules in the system
*/
func (a *Client) ListSecurityRules(params *ListSecurityRulesParams, authInfo runtime.ClientAuthInfoWriter) (*ListSecurityRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSecurityRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListSecurityRules",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/securityrules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListSecurityRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSecurityRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListSecurityRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListSecurityScans useds to return a list of security scan results
*/
func (a *Client) ListSecurityScans(params *ListSecurityScansParams, authInfo runtime.ClientAuthInfoWriter) (*ListSecurityScansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSecurityScansParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListSecurityScans",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/securityscans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListSecurityScansReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSecurityScansOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListSecurityScans: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListSecurityScansForResource useds to return the history of security scans for specific object in the system
*/
func (a *Client) ListSecurityScansForResource(params *ListSecurityScansForResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ListSecurityScansForResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSecurityScansForResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListSecurityScansForResource",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/securityscans/scans/{group}/{version}/{kind}/{namespace}/{name}/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListSecurityScansForResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSecurityScansForResourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListSecurityScansForResource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StoreSecurityScanForResource useds to persist a new security scan result for specific object in the system
*/
func (a *Client) StoreSecurityScanForResource(params *StoreSecurityScanForResourceParams, authInfo runtime.ClientAuthInfoWriter) (*StoreSecurityScanForResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStoreSecurityScanForResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StoreSecurityScanForResource",
		Method:             "PUT",
		PathPattern:        "/api/v1alpha1/securityscans/scans/{group}/{version}/{kind}/{namespace}/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StoreSecurityScanForResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StoreSecurityScanForResourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StoreSecurityScanForResource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
