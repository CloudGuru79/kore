// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/appvia/kore/pkg/apiclient/models"
)

// GetTeamServicePlanDetailsReader is a Reader for the GetTeamServicePlanDetails structure.
type GetTeamServicePlanDetailsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTeamServicePlanDetailsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTeamServicePlanDetailsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetTeamServicePlanDetailsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetTeamServicePlanDetailsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTeamServicePlanDetailsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetTeamServicePlanDetailsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetTeamServicePlanDetailsOK creates a GetTeamServicePlanDetailsOK with default headers values
func NewGetTeamServicePlanDetailsOK() *GetTeamServicePlanDetailsOK {
	return &GetTeamServicePlanDetailsOK{}
}

/*GetTeamServicePlanDetailsOK handles this case with default header values.

Contains details of the plan
*/
type GetTeamServicePlanDetailsOK struct {
	Payload *models.ApiserverTeamServicePlan
}

func (o *GetTeamServicePlanDetailsOK) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/teams/{team}/serviceplans/{plan}][%d] getTeamServicePlanDetailsOK  %+v", 200, o.Payload)
}

func (o *GetTeamServicePlanDetailsOK) GetPayload() *models.ApiserverTeamServicePlan {
	return o.Payload
}

func (o *GetTeamServicePlanDetailsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ApiserverTeamServicePlan)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamServicePlanDetailsUnauthorized creates a GetTeamServicePlanDetailsUnauthorized with default headers values
func NewGetTeamServicePlanDetailsUnauthorized() *GetTeamServicePlanDetailsUnauthorized {
	return &GetTeamServicePlanDetailsUnauthorized{}
}

/*GetTeamServicePlanDetailsUnauthorized handles this case with default header values.

If not authenticated
*/
type GetTeamServicePlanDetailsUnauthorized struct {
}

func (o *GetTeamServicePlanDetailsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/teams/{team}/serviceplans/{plan}][%d] getTeamServicePlanDetailsUnauthorized ", 401)
}

func (o *GetTeamServicePlanDetailsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTeamServicePlanDetailsForbidden creates a GetTeamServicePlanDetailsForbidden with default headers values
func NewGetTeamServicePlanDetailsForbidden() *GetTeamServicePlanDetailsForbidden {
	return &GetTeamServicePlanDetailsForbidden{}
}

/*GetTeamServicePlanDetailsForbidden handles this case with default header values.

If authenticated but not authorized
*/
type GetTeamServicePlanDetailsForbidden struct {
}

func (o *GetTeamServicePlanDetailsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/teams/{team}/serviceplans/{plan}][%d] getTeamServicePlanDetailsForbidden ", 403)
}

func (o *GetTeamServicePlanDetailsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTeamServicePlanDetailsNotFound creates a GetTeamServicePlanDetailsNotFound with default headers values
func NewGetTeamServicePlanDetailsNotFound() *GetTeamServicePlanDetailsNotFound {
	return &GetTeamServicePlanDetailsNotFound{}
}

/*GetTeamServicePlanDetailsNotFound handles this case with default header values.

Team or service plan doesn't exist
*/
type GetTeamServicePlanDetailsNotFound struct {
}

func (o *GetTeamServicePlanDetailsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/teams/{team}/serviceplans/{plan}][%d] getTeamServicePlanDetailsNotFound ", 404)
}

func (o *GetTeamServicePlanDetailsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTeamServicePlanDetailsInternalServerError creates a GetTeamServicePlanDetailsInternalServerError with default headers values
func NewGetTeamServicePlanDetailsInternalServerError() *GetTeamServicePlanDetailsInternalServerError {
	return &GetTeamServicePlanDetailsInternalServerError{}
}

/*GetTeamServicePlanDetailsInternalServerError handles this case with default header values.

A generic API error containing the cause of the error
*/
type GetTeamServicePlanDetailsInternalServerError struct {
	Payload *models.ApiserverError
}

func (o *GetTeamServicePlanDetailsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/teams/{team}/serviceplans/{plan}][%d] getTeamServicePlanDetailsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetTeamServicePlanDetailsInternalServerError) GetPayload() *models.ApiserverError {
	return o.Payload
}

func (o *GetTeamServicePlanDetailsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ApiserverError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
