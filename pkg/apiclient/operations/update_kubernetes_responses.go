// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/appvia/kore/pkg/apiclient/models"
)

// UpdateKubernetesReader is a Reader for the UpdateKubernetes structure.
type UpdateKubernetesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateKubernetesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateKubernetesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateKubernetesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateKubernetesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateKubernetesOK creates a UpdateKubernetesOK with default headers values
func NewUpdateKubernetesOK() *UpdateKubernetesOK {
	return &UpdateKubernetesOK{}
}

/*UpdateKubernetesOK handles this case with default header values.

Contains the former team definition from the kore
*/
type UpdateKubernetesOK struct {
	Payload *models.V1Kubernetes
}

func (o *UpdateKubernetesOK) Error() string {
	return fmt.Sprintf("[PUT /api/v1alpha1/teams/{team}/kubernetes/{name}][%d] updateKubernetesOK  %+v", 200, o.Payload)
}

func (o *UpdateKubernetesOK) GetPayload() *models.V1Kubernetes {
	return o.Payload
}

func (o *UpdateKubernetesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1Kubernetes)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateKubernetesBadRequest creates a UpdateKubernetesBadRequest with default headers values
func NewUpdateKubernetesBadRequest() *UpdateKubernetesBadRequest {
	return &UpdateKubernetesBadRequest{}
}

/*UpdateKubernetesBadRequest handles this case with default header values.

Validation error of the provided details
*/
type UpdateKubernetesBadRequest struct {
	Payload *models.ValidationError
}

func (o *UpdateKubernetesBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v1alpha1/teams/{team}/kubernetes/{name}][%d] updateKubernetesBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateKubernetesBadRequest) GetPayload() *models.ValidationError {
	return o.Payload
}

func (o *UpdateKubernetesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateKubernetesInternalServerError creates a UpdateKubernetesInternalServerError with default headers values
func NewUpdateKubernetesInternalServerError() *UpdateKubernetesInternalServerError {
	return &UpdateKubernetesInternalServerError{}
}

/*UpdateKubernetesInternalServerError handles this case with default header values.

A generic API error containing the cause of the error
*/
type UpdateKubernetesInternalServerError struct {
	Payload *models.ApiserverError
}

func (o *UpdateKubernetesInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v1alpha1/teams/{team}/kubernetes/{name}][%d] updateKubernetesInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateKubernetesInternalServerError) GetPayload() *models.ApiserverError {
	return o.Payload
}

func (o *UpdateKubernetesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ApiserverError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
