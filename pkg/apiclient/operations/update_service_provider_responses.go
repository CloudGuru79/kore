// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/appvia/kore/pkg/apiclient/models"
)

// UpdateServiceProviderReader is a Reader for the UpdateServiceProvider structure.
type UpdateServiceProviderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateServiceProviderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateServiceProviderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateServiceProviderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateServiceProviderUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateServiceProviderForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateServiceProviderInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateServiceProviderOK creates a UpdateServiceProviderOK with default headers values
func NewUpdateServiceProviderOK() *UpdateServiceProviderOK {
	return &UpdateServiceProviderOK{}
}

/*UpdateServiceProviderOK handles this case with default header values.

Contains the service provider definition
*/
type UpdateServiceProviderOK struct {
	Payload *models.V1ServiceProvider
}

func (o *UpdateServiceProviderOK) Error() string {
	return fmt.Sprintf("[PUT /api/v1alpha1/serviceproviders/{name}][%d] updateServiceProviderOK  %+v", 200, o.Payload)
}

func (o *UpdateServiceProviderOK) GetPayload() *models.V1ServiceProvider {
	return o.Payload
}

func (o *UpdateServiceProviderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1ServiceProvider)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServiceProviderBadRequest creates a UpdateServiceProviderBadRequest with default headers values
func NewUpdateServiceProviderBadRequest() *UpdateServiceProviderBadRequest {
	return &UpdateServiceProviderBadRequest{}
}

/*UpdateServiceProviderBadRequest handles this case with default header values.

Validation error of supplied parameters/body
*/
type UpdateServiceProviderBadRequest struct {
	Payload *models.ValidationError
}

func (o *UpdateServiceProviderBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v1alpha1/serviceproviders/{name}][%d] updateServiceProviderBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateServiceProviderBadRequest) GetPayload() *models.ValidationError {
	return o.Payload
}

func (o *UpdateServiceProviderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServiceProviderUnauthorized creates a UpdateServiceProviderUnauthorized with default headers values
func NewUpdateServiceProviderUnauthorized() *UpdateServiceProviderUnauthorized {
	return &UpdateServiceProviderUnauthorized{}
}

/*UpdateServiceProviderUnauthorized handles this case with default header values.

If not authenticated
*/
type UpdateServiceProviderUnauthorized struct {
}

func (o *UpdateServiceProviderUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v1alpha1/serviceproviders/{name}][%d] updateServiceProviderUnauthorized ", 401)
}

func (o *UpdateServiceProviderUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateServiceProviderForbidden creates a UpdateServiceProviderForbidden with default headers values
func NewUpdateServiceProviderForbidden() *UpdateServiceProviderForbidden {
	return &UpdateServiceProviderForbidden{}
}

/*UpdateServiceProviderForbidden handles this case with default header values.

If authenticated but not authorized
*/
type UpdateServiceProviderForbidden struct {
}

func (o *UpdateServiceProviderForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v1alpha1/serviceproviders/{name}][%d] updateServiceProviderForbidden ", 403)
}

func (o *UpdateServiceProviderForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateServiceProviderInternalServerError creates a UpdateServiceProviderInternalServerError with default headers values
func NewUpdateServiceProviderInternalServerError() *UpdateServiceProviderInternalServerError {
	return &UpdateServiceProviderInternalServerError{}
}

/*UpdateServiceProviderInternalServerError handles this case with default header values.

A generic API error containing the cause of the error
*/
type UpdateServiceProviderInternalServerError struct {
	Payload *models.ApiserverError
}

func (o *UpdateServiceProviderInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v1alpha1/serviceproviders/{name}][%d] updateServiceProviderInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateServiceProviderInternalServerError) GetPayload() *models.ApiserverError {
	return o.Payload
}

func (o *UpdateServiceProviderInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ApiserverError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
