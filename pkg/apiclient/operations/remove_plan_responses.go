// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/appvia/kore/pkg/apiclient/models"
)

// RemovePlanReader is a Reader for the RemovePlan structure.
type RemovePlanReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RemovePlanReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRemovePlanOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRemovePlanBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRemovePlanUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRemovePlanForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRemovePlanNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRemovePlanInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRemovePlanOK creates a RemovePlanOK with default headers values
func NewRemovePlanOK() *RemovePlanOK {
	return &RemovePlanOK{}
}

/*RemovePlanOK handles this case with default header values.

Contains the plan definition
*/
type RemovePlanOK struct {
	Payload *models.V1Plan
}

func (o *RemovePlanOK) Error() string {
	return fmt.Sprintf("[DELETE /api/v1alpha1/plans/{name}][%d] removePlanOK  %+v", 200, o.Payload)
}

func (o *RemovePlanOK) GetPayload() *models.V1Plan {
	return o.Payload
}

func (o *RemovePlanOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1Plan)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemovePlanBadRequest creates a RemovePlanBadRequest with default headers values
func NewRemovePlanBadRequest() *RemovePlanBadRequest {
	return &RemovePlanBadRequest{}
}

/*RemovePlanBadRequest handles this case with default header values.

Validation error of supplied parameters/body
*/
type RemovePlanBadRequest struct {
	Payload *models.ValidationError
}

func (o *RemovePlanBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/v1alpha1/plans/{name}][%d] removePlanBadRequest  %+v", 400, o.Payload)
}

func (o *RemovePlanBadRequest) GetPayload() *models.ValidationError {
	return o.Payload
}

func (o *RemovePlanBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemovePlanUnauthorized creates a RemovePlanUnauthorized with default headers values
func NewRemovePlanUnauthorized() *RemovePlanUnauthorized {
	return &RemovePlanUnauthorized{}
}

/*RemovePlanUnauthorized handles this case with default header values.

If not authenticated
*/
type RemovePlanUnauthorized struct {
}

func (o *RemovePlanUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /api/v1alpha1/plans/{name}][%d] removePlanUnauthorized ", 401)
}

func (o *RemovePlanUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRemovePlanForbidden creates a RemovePlanForbidden with default headers values
func NewRemovePlanForbidden() *RemovePlanForbidden {
	return &RemovePlanForbidden{}
}

/*RemovePlanForbidden handles this case with default header values.

If authenticated but not authorized
*/
type RemovePlanForbidden struct {
}

func (o *RemovePlanForbidden) Error() string {
	return fmt.Sprintf("[DELETE /api/v1alpha1/plans/{name}][%d] removePlanForbidden ", 403)
}

func (o *RemovePlanForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRemovePlanNotFound creates a RemovePlanNotFound with default headers values
func NewRemovePlanNotFound() *RemovePlanNotFound {
	return &RemovePlanNotFound{}
}

/*RemovePlanNotFound handles this case with default header values.

the plan with the given name doesn't exist
*/
type RemovePlanNotFound struct {
}

func (o *RemovePlanNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v1alpha1/plans/{name}][%d] removePlanNotFound ", 404)
}

func (o *RemovePlanNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRemovePlanInternalServerError creates a RemovePlanInternalServerError with default headers values
func NewRemovePlanInternalServerError() *RemovePlanInternalServerError {
	return &RemovePlanInternalServerError{}
}

/*RemovePlanInternalServerError handles this case with default header values.

A generic API error containing the cause of the error
*/
type RemovePlanInternalServerError struct {
	Payload *models.ApiserverError
}

func (o *RemovePlanInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/v1alpha1/plans/{name}][%d] removePlanInternalServerError  %+v", 500, o.Payload)
}

func (o *RemovePlanInternalServerError) GetPayload() *models.ApiserverError {
	return o.Payload
}

func (o *RemovePlanInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ApiserverError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
