// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/appvia/kore/pkg/apiclient/models"
)

// FindEKSReader is a Reader for the FindEKS structure.
type FindEKSReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindEKSReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFindEKSOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewFindEKSDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewFindEKSOK creates a FindEKSOK with default headers values
func NewFindEKSOK() *FindEKSOK {
	return &FindEKSOK{}
}

/*FindEKSOK handles this case with default header values.

Contains the former team definition from the kore
*/
type FindEKSOK struct {
	Payload *models.V1alpha1EKS
}

func (o *FindEKSOK) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/teams/{team}/eks/{name}][%d] findEKSOK  %+v", 200, o.Payload)
}

func (o *FindEKSOK) GetPayload() *models.V1alpha1EKS {
	return o.Payload
}

func (o *FindEKSOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1alpha1EKS)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindEKSDefault creates a FindEKSDefault with default headers values
func NewFindEKSDefault(code int) *FindEKSDefault {
	return &FindEKSDefault{
		_statusCode: code,
	}
}

/*FindEKSDefault handles this case with default header values.

A generic API error containing the cause of the error
*/
type FindEKSDefault struct {
	_statusCode int

	Payload *models.ApiserverError
}

// Code gets the status code for the find e k s default response
func (o *FindEKSDefault) Code() int {
	return o._statusCode
}

func (o *FindEKSDefault) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/teams/{team}/eks/{name}][%d] findEKS default  %+v", o._statusCode, o.Payload)
}

func (o *FindEKSDefault) GetPayload() *models.ApiserverError {
	return o.Payload
}

func (o *FindEKSDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ApiserverError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
