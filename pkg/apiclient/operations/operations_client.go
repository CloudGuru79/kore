// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddTeamMember(params *AddTeamMemberParams, authInfo runtime.ClientAuthInfoWriter) (*AddTeamMemberOK, error)

	DeleteTeamSecret(params *DeleteTeamSecretParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTeamSecretOK, error)

	GenerateInviteLink(params *GenerateInviteLinkParams, authInfo runtime.ClientAuthInfoWriter) (*GenerateInviteLinkOK, error)

	GenerateInviteLinkForUser(params *GenerateInviteLinkForUserParams, authInfo runtime.ClientAuthInfoWriter) (*GenerateInviteLinkForUserOK, error)

	GetAllocation(params *GetAllocationParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllocationOK, error)

	GetCluster(params *GetClusterParams, authInfo runtime.ClientAuthInfoWriter) (*GetClusterOK, error)

	GetDefaultIDP(params *GetDefaultIDPParams, authInfo runtime.ClientAuthInfoWriter) (*GetDefaultIDPOK, error)

	GetGKE(params *GetGKEParams, authInfo runtime.ClientAuthInfoWriter) (*GetGKEOK, error)

	GetGKECredential(params *GetGKECredentialParams, authInfo runtime.ClientAuthInfoWriter) (*GetGKECredentialOK, error)

	GetHealth(params *GetHealthParams, authInfo runtime.ClientAuthInfoWriter) (*GetHealthOK, error)

	GetIDP(params *GetIDPParams, authInfo runtime.ClientAuthInfoWriter) (*GetIDPOK, error)

	GetNamespace(params *GetNamespaceParams, authInfo runtime.ClientAuthInfoWriter) (*GetNamespaceOK, error)

	GetPlan(params *GetPlanParams, authInfo runtime.ClientAuthInfoWriter) (*GetPlanOK, error)

	GetTeam(params *GetTeamParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamOK, error)

	GetTeamAudit(params *GetTeamAuditParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamAuditOK, error)

	GetTeamMembers(params *GetTeamMembersParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamMembersOK, error)

	GetTeamSecret(params *GetTeamSecretParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamSecretOK, error)

	GetUser(params *GetUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserOK, error)

	InvitationSubmit(params *InvitationSubmitParams, authInfo runtime.ClientAuthInfoWriter) (*InvitationSubmitOK, error)

	InviteUser(params *InviteUserParams, authInfo runtime.ClientAuthInfoWriter) (*InviteUserOK, error)

	ListAllocations(params *ListAllocationsParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllocationsOK, error)

	ListAuditEvents(params *ListAuditEventsParams, authInfo runtime.ClientAuthInfoWriter) (*ListAuditEventsOK, error)

	ListClusters(params *ListClustersParams, authInfo runtime.ClientAuthInfoWriter) (*ListClustersOK, error)

	ListGKECredentials(params *ListGKECredentialsParams, authInfo runtime.ClientAuthInfoWriter) (*ListGKECredentialsOK, error)

	ListGKEs(params *ListGKEsParams, authInfo runtime.ClientAuthInfoWriter) (*ListGKEsOK, error)

	ListIDPTypes(params *ListIDPTypesParams, authInfo runtime.ClientAuthInfoWriter) (*ListIDPTypesOK, error)

	ListIDPs(params *ListIDPsParams, authInfo runtime.ClientAuthInfoWriter) (*ListIDPsOK, error)

	ListInvites(params *ListInvitesParams, authInfo runtime.ClientAuthInfoWriter) (*ListInvitesOK, error)

	ListNamespaces(params *ListNamespacesParams, authInfo runtime.ClientAuthInfoWriter) (*ListNamespacesOK, error)

	ListPlans(params *ListPlansParams, authInfo runtime.ClientAuthInfoWriter) (*ListPlansOK, error)

	ListTeamSecrets(params *ListTeamSecretsParams, authInfo runtime.ClientAuthInfoWriter) (*ListTeamSecretsOK, error)

	ListTeams(params *ListTeamsParams, authInfo runtime.ClientAuthInfoWriter) (*ListTeamsOK, error)

	ListUserTeams(params *ListUserTeamsParams, authInfo runtime.ClientAuthInfoWriter) (*ListUserTeamsOK, error)

	ListUsers(params *ListUsersParams, authInfo runtime.ClientAuthInfoWriter) (*ListUsersOK, error)

	LoginAttempted(params *LoginAttemptedParams, authInfo runtime.ClientAuthInfoWriter) (*LoginAttemptedOK, error)

	LoginCallback(params *LoginCallbackParams, authInfo runtime.ClientAuthInfoWriter) (*LoginCallbackOK, error)

	RemoveAllocation(params *RemoveAllocationParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveAllocationOK, error)

	RemoveCluster(params *RemoveClusterParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveClusterOK, error)

	RemoveGKE(params *RemoveGKEParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveGKEOK, error)

	RemoveGKECredential(params *RemoveGKECredentialParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveGKECredentialOK, error)

	RemoveInvite(params *RemoveInviteParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveInviteOK, error)

	RemoveNamespace(params *RemoveNamespaceParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveNamespaceOK, error)

	RemovePlan(params *RemovePlanParams, authInfo runtime.ClientAuthInfoWriter) (*RemovePlanOK, error)

	RemoveTeam(params *RemoveTeamParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveTeamOK, error)

	RemoveTeamMember(params *RemoveTeamMemberParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveTeamMemberOK, error)

	RemoveUser(params *RemoveUserParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveUserOK, error)

	UpdateAllocation(params *UpdateAllocationParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAllocationOK, error)

	UpdateCluster(params *UpdateClusterParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateClusterOK, error)

	UpdateGKE(params *UpdateGKEParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateGKEOK, error)

	UpdateGKECredential(params *UpdateGKECredentialParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateGKECredentialOK, error)

	UpdateIDP(params *UpdateIDPParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateIDPOK, error)

	UpdateIDPClient(params *UpdateIDPClientParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateIDPClientOK, error)

	UpdateNamespace(params *UpdateNamespaceParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNamespaceOK, error)

	UpdatePlan(params *UpdatePlanParams, authInfo runtime.ClientAuthInfoWriter) (*UpdatePlanOK, error)

	UpdateTeam(params *UpdateTeamParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateTeamOK, error)

	UpdateTeamSecret(params *UpdateTeamSecretParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateTeamSecretOK, error)

	UpdateUser(params *UpdateUserParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateUserOK, error)

	WhoAmI(params *WhoAmIParams, authInfo runtime.ClientAuthInfoWriter) (*WhoAmIOK, error)

	DeleteOrganization(params *DeleteOrganizationParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOrganizationOK, error)

	DeleteProjectClaim(params *DeleteProjectClaimParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProjectClaimOK, error)

	FindOrganization(params *FindOrganizationParams, authInfo runtime.ClientAuthInfoWriter) (*FindOrganizationOK, error)

	FindOrganizations(params *FindOrganizationsParams, authInfo runtime.ClientAuthInfoWriter) (*FindOrganizationsOK, error)

	FindProjectClaim(params *FindProjectClaimParams, authInfo runtime.ClientAuthInfoWriter) (*FindProjectClaimOK, error)

	FindProjectClaims(params *FindProjectClaimsParams, authInfo runtime.ClientAuthInfoWriter) (*FindProjectClaimsOK, error)

	UpdateOrganization(params *UpdateOrganizationParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateOrganizationOK, error)

	UpdateProjectClaim(params *UpdateProjectClaimParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProjectClaimOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddTeamMember useds to add a user to the team via membership
*/
func (a *Client) AddTeamMember(params *AddTeamMemberParams, authInfo runtime.ClientAuthInfoWriter) (*AddTeamMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddTeamMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AddTeamMember",
		Method:             "PUT",
		PathPattern:        "/api/v1alpha1/teams/{team}/members/{user}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddTeamMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddTeamMemberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AddTeamMember: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteTeamSecret useds to delete the secret from team
*/
func (a *Client) DeleteTeamSecret(params *DeleteTeamSecretParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTeamSecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTeamSecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteTeamSecret",
		Method:             "DELETE",
		PathPattern:        "/api/v1alpha1/teams/{team}/secrets/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTeamSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTeamSecretOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteTeamSecret: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GenerateInviteLink useds to generate a link which provides automatic membership of the team
*/
func (a *Client) GenerateInviteLink(params *GenerateInviteLinkParams, authInfo runtime.ClientAuthInfoWriter) (*GenerateInviteLinkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateInviteLinkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GenerateInviteLink",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/teams/{team}/invites/generate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GenerateInviteLinkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GenerateInviteLinkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GenerateInviteLink: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GenerateInviteLinkForUser useds to generate for a specific user to join a team
*/
func (a *Client) GenerateInviteLinkForUser(params *GenerateInviteLinkForUserParams, authInfo runtime.ClientAuthInfoWriter) (*GenerateInviteLinkForUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateInviteLinkForUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GenerateInviteLinkForUser",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/teams/{team}/invites/generate/{user}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GenerateInviteLinkForUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GenerateInviteLinkForUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GenerateInviteLinkForUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllocation useds to return an allocation within the team
*/
func (a *Client) GetAllocation(params *GetAllocationParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllocationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllocationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAllocation",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/teams/{team}/allocations/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllocationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllocationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAllocation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCluster useds to return the cluster definition from the kore
*/
func (a *Client) GetCluster(params *GetClusterParams, authInfo runtime.ClientAuthInfoWriter) (*GetClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCluster",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/teams/{team}/clusters/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDefaultIDP returns the default identity provider configured in the kore
*/
func (a *Client) GetDefaultIDP(params *GetDefaultIDPParams, authInfo runtime.ClientAuthInfoWriter) (*GetDefaultIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDefaultIDPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDefaultIDP",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/idp/default",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDefaultIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDefaultIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDefaultIDPDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetGKE returns a specific google container engine cluster to which the team has access
*/
func (a *Client) GetGKE(params *GetGKEParams, authInfo runtime.ClientAuthInfoWriter) (*GetGKEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGKEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGKE",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/teams/{team}/gkes/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGKEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGKEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGKE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGKECredential returns a specific g k e credential to which the team has access
*/
func (a *Client) GetGKECredential(params *GetGKECredentialParams, authInfo runtime.ClientAuthInfoWriter) (*GetGKECredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGKECredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGKECredential",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/teams/{team}/gkecredentials/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGKECredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGKECredentialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGKECredential: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetHealth useds to start the authorization flow for user authentication
*/
func (a *Client) GetHealth(params *GetHealthParams, authInfo runtime.ClientAuthInfoWriter) (*GetHealthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHealthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetHealth",
		Method:             "GET",
		PathPattern:        "/healthz",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHealthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHealthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetHealthDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetIDP returns the definition for a specific identity provider
*/
func (a *Client) GetIDP(params *GetIDPParams, authInfo runtime.ClientAuthInfoWriter) (*GetIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIDPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIDP",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/idp/configured/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIDPDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetNamespace useds to return the details of a namespace within a team
*/
func (a *Client) GetNamespace(params *GetNamespaceParams, authInfo runtime.ClientAuthInfoWriter) (*GetNamespaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNamespaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNamespace",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/teams/{team}/namespaceclaims/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNamespaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNamespaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetNamespace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPlan returns a specific class plan from the kore
*/
func (a *Client) GetPlan(params *GetPlanParams, authInfo runtime.ClientAuthInfoWriter) (*GetPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPlan",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/plans/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetPlanDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetTeam returns information related to the specific team in the kore
*/
func (a *Client) GetTeam(params *GetTeamParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTeam",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/teams/{team}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTeamReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTeamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTeam: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTeamAudit useds to return a collection of events against the team
*/
func (a *Client) GetTeamAudit(params *GetTeamAuditParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamAuditOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamAuditParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTeamAudit",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/teams/{team}/audit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTeamAuditReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTeamAuditOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTeamAudit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTeamMembers returns a list of user memberships in the team
*/
func (a *Client) GetTeamMembers(params *GetTeamMembersParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTeamMembers",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/teams/{team}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTeamMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTeamMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTeamMembers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTeamSecret useds to retrieve the secret from the team
*/
func (a *Client) GetTeamSecret(params *GetTeamSecretParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamSecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamSecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTeamSecret",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/teams/{team}/secrets/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTeamSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTeamSecretOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTeamSecret: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUser returns information related to the specific user in the kore
*/
func (a *Client) GetUser(params *GetUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUser",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/users/{user}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InvitationSubmit useds to verify and handle the team invitation generated links
*/
func (a *Client) InvitationSubmit(params *InvitationSubmitParams, authInfo runtime.ClientAuthInfoWriter) (*InvitationSubmitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInvitationSubmitParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "InvitationSubmit",
		Method:             "PUT",
		PathPattern:        "/api/v1alpha1/teams/invitation/{token}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InvitationSubmitReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InvitationSubmitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InvitationSubmit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InviteUser useds to create an invitation for the team
*/
func (a *Client) InviteUser(params *InviteUserParams, authInfo runtime.ClientAuthInfoWriter) (*InviteUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInviteUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "InviteUser",
		Method:             "PUT",
		PathPattern:        "/api/v1alpha1/teams/{team}/invites/user/{user}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InviteUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InviteUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InviteUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAllocations useds to return a list of all the allocations in the team
*/
func (a *Client) ListAllocations(params *ListAllocationsParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllocationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllocationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListAllocations",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/teams/{team}/allocations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllocationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllocationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListAllocations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAuditEvents useds to return all the audit event across all the teams
*/
func (a *Client) ListAuditEvents(params *ListAuditEventsParams, authInfo runtime.ClientAuthInfoWriter) (*ListAuditEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAuditEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListAuditEvents",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/audit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAuditEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAuditEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListAuditEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListClusters lists all clusters available for a team
*/
func (a *Client) ListClusters(params *ListClustersParams, authInfo runtime.ClientAuthInfoWriter) (*ListClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListClustersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListClusters",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/teams/{team}/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListClustersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListClusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListGKECredentials returns a list of g k e credentials to which the team has access
*/
func (a *Client) ListGKECredentials(params *ListGKECredentialsParams, authInfo runtime.ClientAuthInfoWriter) (*ListGKECredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListGKECredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListGKECredentials",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/teams/{team}/gkecredentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListGKECredentialsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListGKECredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListGKECredentials: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListGKEs returns a list of google container engine clusters which the team has access
*/
func (a *Client) ListGKEs(params *ListGKEsParams, authInfo runtime.ClientAuthInfoWriter) (*ListGKEsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListGKEsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListGKEs",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/teams/{team}/gkes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListGKEsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListGKEsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListGKEs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListIDPTypes returns a list of all the possible identity providers supported in the kore
*/
func (a *Client) ListIDPTypes(params *ListIDPTypesParams, authInfo runtime.ClientAuthInfoWriter) (*ListIDPTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListIDPTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListIDPTypes",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/idp/types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListIDPTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListIDPTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListIDPTypesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListIDPs returns a list of all the configured identity providers in the kore
*/
func (a *Client) ListIDPs(params *ListIDPsParams, authInfo runtime.ClientAuthInfoWriter) (*ListIDPsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListIDPsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListIDPs",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/idp/configured",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListIDPsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListIDPsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListIDPsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListInvites useds to return a list of all the users whom have pending invitations
*/
func (a *Client) ListInvites(params *ListInvitesParams, authInfo runtime.ClientAuthInfoWriter) (*ListInvitesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListInvitesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListInvites",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/teams/{team}/invites/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListInvitesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListInvitesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListInvites: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListNamespaces useds to return all namespaces for the team
*/
func (a *Client) ListNamespaces(params *ListNamespacesParams, authInfo runtime.ClientAuthInfoWriter) (*ListNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListNamespaces",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/teams/{team}/namespaceclaims",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListNamespacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListPlans returns all the classes available to initialized in the kore
*/
func (a *Client) ListPlans(params *ListPlansParams, authInfo runtime.ClientAuthInfoWriter) (*ListPlansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPlansParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListPlans",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/plans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListPlansReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPlansOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListPlansDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListTeamSecrets useds to return all the secrets within the team
*/
func (a *Client) ListTeamSecrets(params *ListTeamSecretsParams, authInfo runtime.ClientAuthInfoWriter) (*ListTeamSecretsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTeamSecretsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListTeamSecrets",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/teams/{team}/secrets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListTeamSecretsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTeamSecretsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListTeamSecrets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListTeams returns all the teams in the kore
*/
func (a *Client) ListTeams(params *ListTeamsParams, authInfo runtime.ClientAuthInfoWriter) (*ListTeamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTeamsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListTeams",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListTeamsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTeamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListTeams: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListUserTeams returns a list of teams the user is a member of
*/
func (a *Client) ListUserTeams(params *ListUserTeamsParams, authInfo runtime.ClientAuthInfoWriter) (*ListUserTeamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListUserTeamsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListUserTeams",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/users/{user}/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListUserTeamsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListUserTeamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListUserTeams: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListUsers returns all the users in the kore
*/
func (a *Client) ListUsers(params *ListUsersParams, authInfo runtime.ClientAuthInfoWriter) (*ListUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListUsers",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LoginAttempted useds to start the authorization flow for user authentication
*/
func (a *Client) LoginAttempted(params *LoginAttemptedParams, authInfo runtime.ClientAuthInfoWriter) (*LoginAttemptedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoginAttemptedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LoginAttempted",
		Method:             "GET",
		PathPattern:        "/oauth/authorize",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoginAttemptedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LoginAttemptedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LoginAttemptedDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  LoginCallback useds to handle the authorization callback from the identity provider
*/
func (a *Client) LoginCallback(params *LoginCallbackParams, authInfo runtime.ClientAuthInfoWriter) (*LoginCallbackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoginCallbackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LoginCallback",
		Method:             "GET",
		PathPattern:        "/oauth/callback",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoginCallbackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LoginCallbackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LoginCallbackDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RemoveAllocation removes an allocation from a team
*/
func (a *Client) RemoveAllocation(params *RemoveAllocationParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveAllocationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveAllocationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RemoveAllocation",
		Method:             "DELETE",
		PathPattern:        "/api/v1alpha1/teams/{team}/allocations/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveAllocationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveAllocationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RemoveAllocation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveCluster useds to remove a cluster from a team
*/
func (a *Client) RemoveCluster(params *RemoveClusterParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RemoveCluster",
		Method:             "DELETE",
		PathPattern:        "/api/v1alpha1/teams/{team}/clusters/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RemoveCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveGKE is used to delete a managed g k e cluster from the kore
*/
func (a *Client) RemoveGKE(params *RemoveGKEParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveGKEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveGKEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RemoveGKE",
		Method:             "DELETE",
		PathPattern:        "/api/v1alpha1/teams/{team}/gkes/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveGKEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveGKEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RemoveGKE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveGKECredential deletes a specific g k e credential from the team
*/
func (a *Client) RemoveGKECredential(params *RemoveGKECredentialParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveGKECredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveGKECredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RemoveGKECredential",
		Method:             "DELETE",
		PathPattern:        "/api/v1alpha1/teams/{team}/gkecredentials/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveGKECredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveGKECredentialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RemoveGKECredential: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveInvite useds to remove a user invitation for the team
*/
func (a *Client) RemoveInvite(params *RemoveInviteParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveInviteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveInviteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RemoveInvite",
		Method:             "DELETE",
		PathPattern:        "/api/v1alpha1/teams/{team}/invites/user/{user}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveInviteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveInviteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RemoveInvite: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveNamespace useds to remove a namespace from a team
*/
func (a *Client) RemoveNamespace(params *RemoveNamespaceParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveNamespaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveNamespaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RemoveNamespace",
		Method:             "DELETE",
		PathPattern:        "/api/v1alpha1/teams/{team}/namespaceclaims/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveNamespaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveNamespaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RemoveNamespace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemovePlan useds to delete a plan from the kore
*/
func (a *Client) RemovePlan(params *RemovePlanParams, authInfo runtime.ClientAuthInfoWriter) (*RemovePlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemovePlanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RemovePlan",
		Method:             "DELETE",
		PathPattern:        "/api/v1alpha1/plans/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemovePlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemovePlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RemovePlanDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RemoveTeam useds to delete a team from the kore
*/
func (a *Client) RemoveTeam(params *RemoveTeamParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveTeamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveTeamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RemoveTeam",
		Method:             "DELETE",
		PathPattern:        "/api/v1alpha1/teams/{team}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveTeamReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveTeamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RemoveTeam: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveTeamMember useds to remove team membership from the team
*/
func (a *Client) RemoveTeamMember(params *RemoveTeamMemberParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveTeamMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveTeamMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RemoveTeamMember",
		Method:             "DELETE",
		PathPattern:        "/api/v1alpha1/teams/{team}/members/{user}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveTeamMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveTeamMemberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RemoveTeamMember: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveUser useds to delete a user from the kore
*/
func (a *Client) RemoveUser(params *RemoveUserParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RemoveUser",
		Method:             "DELETE",
		PathPattern:        "/api/v1alpha1/users/{user}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RemoveUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateAllocation useds to create update an allocation within the team
*/
func (a *Client) UpdateAllocation(params *UpdateAllocationParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAllocationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAllocationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateAllocation",
		Method:             "PUT",
		PathPattern:        "/api/v1alpha1/teams/{team}/allocations/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateAllocationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAllocationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateAllocation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCluster useds to create update a cluster definition for a team
*/
func (a *Client) UpdateCluster(params *UpdateClusterParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateCluster",
		Method:             "PUT",
		PathPattern:        "/api/v1alpha1/teams/{team}/clusters/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateGKE is used to provision or update a g k e cluster in the kore
*/
func (a *Client) UpdateGKE(params *UpdateGKEParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateGKEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGKEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateGKE",
		Method:             "PUT",
		PathPattern:        "/api/v1alpha1/teams/{team}/gkes/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateGKEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGKEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateGKE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateGKECredential creates or updates a specific g k e credential to which the team has access
*/
func (a *Client) UpdateGKECredential(params *UpdateGKECredentialParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateGKECredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGKECredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateGKECredential",
		Method:             "PUT",
		PathPattern:        "/api/v1alpha1/teams/{team}/gkecredentials/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateGKECredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGKECredentialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateGKECredential: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateIDP returns the definition for a specific ID provider
*/
func (a *Client) UpdateIDP(params *UpdateIDPParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIDPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateIDP",
		Method:             "PUT",
		PathPattern:        "/api/v1alpha1/idp/configured/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateIDPDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateIDPClient updates the definition for a specific idp client
*/
func (a *Client) UpdateIDPClient(params *UpdateIDPClientParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateIDPClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIDPClientParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateIDPClient",
		Method:             "PUT",
		PathPattern:        "/api/v1alpha1/idp/clients/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateIDPClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIDPClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateIDPClientDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateNamespace useds to create or update the details of a namespace within a team
*/
func (a *Client) UpdateNamespace(params *UpdateNamespaceParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNamespaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNamespaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateNamespace",
		Method:             "PUT",
		PathPattern:        "/api/v1alpha1/teams/{team}/namespaceclaims/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateNamespaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNamespaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateNamespace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdatePlan useds to create or update a plan in the kore
*/
func (a *Client) UpdatePlan(params *UpdatePlanParams, authInfo runtime.ClientAuthInfoWriter) (*UpdatePlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePlanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdatePlan",
		Method:             "PUT",
		PathPattern:        "/api/v1alpha1/plans/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdatePlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdatePlanDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateTeam useds to create or update a team in the kore
*/
func (a *Client) UpdateTeam(params *UpdateTeamParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateTeamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTeamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateTeam",
		Method:             "PUT",
		PathPattern:        "/api/v1alpha1/teams/{team}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateTeamReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTeamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateTeam: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateTeamSecret useds to update the secret in the team
*/
func (a *Client) UpdateTeamSecret(params *UpdateTeamSecretParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateTeamSecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTeamSecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateTeamSecret",
		Method:             "PUT",
		PathPattern:        "/api/v1alpha1/teams/{team}/secrets/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateTeamSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTeamSecretOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateTeamSecret: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateUser useds to create or update a user in the kore
*/
func (a *Client) UpdateUser(params *UpdateUserParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateUser",
		Method:             "PUT",
		PathPattern:        "/api/v1alpha1/users/{user}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WhoAmI returns information about who the user is and what teams they are a member
*/
func (a *Client) WhoAmI(params *WhoAmIParams, authInfo runtime.ClientAuthInfoWriter) (*WhoAmIOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWhoAmIParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WhoAmI",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/whoami",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WhoAmIReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WhoAmIOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WhoAmI: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteOrganization is used to delete a managed gcp organization
*/
func (a *Client) DeleteOrganization(params *DeleteOrganizationParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteOrganization",
		Method:             "DELETE",
		PathPattern:        "/api/v1alpha1/teams/{team}/organizations/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOrganizationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteOrganizationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteProjectClaim is used to delete a managed gcp project claim
*/
func (a *Client) DeleteProjectClaim(params *DeleteProjectClaimParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProjectClaimOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectClaimParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProjectClaim",
		Method:             "DELETE",
		PathPattern:        "/api/v1alpha1/teams/{team}/projectclaims/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteProjectClaimReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProjectClaimOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteProjectClaimDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FindOrganization is the used tor return a specific gcp organization
*/
func (a *Client) FindOrganization(params *FindOrganizationParams, authInfo runtime.ClientAuthInfoWriter) (*FindOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "findOrganization",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/teams/{team}/organizations/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindOrganizationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FindOrganizationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FindOrganizations is the used tor return a list of gcp organizations
*/
func (a *Client) FindOrganizations(params *FindOrganizationsParams, authInfo runtime.ClientAuthInfoWriter) (*FindOrganizationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindOrganizationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "findOrganizations",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/teams/{team}/organizations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindOrganizationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindOrganizationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FindOrganizationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FindProjectClaim is the used tor return a list of google container engine clusters which thhe team has access
*/
func (a *Client) FindProjectClaim(params *FindProjectClaimParams, authInfo runtime.ClientAuthInfoWriter) (*FindProjectClaimOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindProjectClaimParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "findProjectClaim",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/teams/{team}/projectclaims/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindProjectClaimReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindProjectClaimOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FindProjectClaimDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FindProjectClaims is the used tor return a list of google container engine clusters which thhe team has access
*/
func (a *Client) FindProjectClaims(params *FindProjectClaimsParams, authInfo runtime.ClientAuthInfoWriter) (*FindProjectClaimsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindProjectClaimsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "findProjectClaims",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/teams/{team}/projectclaims",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindProjectClaimsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindProjectClaimsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FindProjectClaimsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateOrganization is used to provision or update a gcp organization
*/
func (a *Client) UpdateOrganization(params *UpdateOrganizationParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateOrganization",
		Method:             "PUT",
		PathPattern:        "/api/v1alpha1/teams/{team}/organizations/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateOrganizationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateProjectClaim is used to provision or update a gcp project claim
*/
func (a *Client) UpdateProjectClaim(params *UpdateProjectClaimParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProjectClaimOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProjectClaimParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateProjectClaim",
		Method:             "PUT",
		PathPattern:        "/api/v1alpha1/teams/{team}/projectclaims/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateProjectClaimReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProjectClaimOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateProjectClaimDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
