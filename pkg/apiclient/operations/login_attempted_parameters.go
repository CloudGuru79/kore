// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewLoginAttemptedParams creates a new LoginAttemptedParams object
// with the default values initialized.
func NewLoginAttemptedParams() *LoginAttemptedParams {
	var ()
	return &LoginAttemptedParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewLoginAttemptedParamsWithTimeout creates a new LoginAttemptedParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewLoginAttemptedParamsWithTimeout(timeout time.Duration) *LoginAttemptedParams {
	var ()
	return &LoginAttemptedParams{

		timeout: timeout,
	}
}

// NewLoginAttemptedParamsWithContext creates a new LoginAttemptedParams object
// with the default values initialized, and the ability to set a context for a request
func NewLoginAttemptedParamsWithContext(ctx context.Context) *LoginAttemptedParams {
	var ()
	return &LoginAttemptedParams{

		Context: ctx,
	}
}

// NewLoginAttemptedParamsWithHTTPClient creates a new LoginAttemptedParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewLoginAttemptedParamsWithHTTPClient(client *http.Client) *LoginAttemptedParams {
	var ()
	return &LoginAttemptedParams{
		HTTPClient: client,
	}
}

/*LoginAttemptedParams contains all the parameters to send to the API endpoint
for the login attempted operation typically these are written to a http.Request
*/
type LoginAttemptedParams struct {

	/*RedirectURL
	  The rediection url, i.e. the location to redirect post

	*/
	RedirectURL string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the login attempted params
func (o *LoginAttemptedParams) WithTimeout(timeout time.Duration) *LoginAttemptedParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the login attempted params
func (o *LoginAttemptedParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the login attempted params
func (o *LoginAttemptedParams) WithContext(ctx context.Context) *LoginAttemptedParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the login attempted params
func (o *LoginAttemptedParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the login attempted params
func (o *LoginAttemptedParams) WithHTTPClient(client *http.Client) *LoginAttemptedParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the login attempted params
func (o *LoginAttemptedParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRedirectURL adds the redirectURL to the login attempted params
func (o *LoginAttemptedParams) WithRedirectURL(redirectURL string) *LoginAttemptedParams {
	o.SetRedirectURL(redirectURL)
	return o
}

// SetRedirectURL adds the redirectUrl to the login attempted params
func (o *LoginAttemptedParams) SetRedirectURL(redirectURL string) {
	o.RedirectURL = redirectURL
}

// WriteToRequest writes these params to a swagger request
func (o *LoginAttemptedParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param redirect_url
	qrRedirectURL := o.RedirectURL
	qRedirectURL := qrRedirectURL
	if qRedirectURL != "" {
		if err := r.SetQueryParam("redirect_url", qRedirectURL); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
