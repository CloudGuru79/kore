// Code generated by counterfeiter. DO NOT EDIT.
package authproxyfakes

import (
	"net/http"
	"sync"

	authproxy "github.com/appvia/kore/pkg/cmd/auth-proxy"
)

type FakeVerifier struct {
	AdmitStub        func(*http.Request) (bool, error)
	admitMutex       sync.RWMutex
	admitArgsForCall []struct {
		arg1 *http.Request
	}
	admitReturns struct {
		result1 bool
		result2 error
	}
	admitReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeVerifier) Admit(arg1 *http.Request) (bool, error) {
	fake.admitMutex.Lock()
	ret, specificReturn := fake.admitReturnsOnCall[len(fake.admitArgsForCall)]
	fake.admitArgsForCall = append(fake.admitArgsForCall, struct {
		arg1 *http.Request
	}{arg1})
	fake.recordInvocation("Admit", []interface{}{arg1})
	fake.admitMutex.Unlock()
	if fake.AdmitStub != nil {
		return fake.AdmitStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.admitReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVerifier) AdmitCallCount() int {
	fake.admitMutex.RLock()
	defer fake.admitMutex.RUnlock()
	return len(fake.admitArgsForCall)
}

func (fake *FakeVerifier) AdmitCalls(stub func(*http.Request) (bool, error)) {
	fake.admitMutex.Lock()
	defer fake.admitMutex.Unlock()
	fake.AdmitStub = stub
}

func (fake *FakeVerifier) AdmitArgsForCall(i int) *http.Request {
	fake.admitMutex.RLock()
	defer fake.admitMutex.RUnlock()
	argsForCall := fake.admitArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVerifier) AdmitReturns(result1 bool, result2 error) {
	fake.admitMutex.Lock()
	defer fake.admitMutex.Unlock()
	fake.AdmitStub = nil
	fake.admitReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeVerifier) AdmitReturnsOnCall(i int, result1 bool, result2 error) {
	fake.admitMutex.Lock()
	defer fake.admitMutex.Unlock()
	fake.AdmitStub = nil
	if fake.admitReturnsOnCall == nil {
		fake.admitReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.admitReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeVerifier) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.admitMutex.RLock()
	defer fake.admitMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeVerifier) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ authproxy.Verifier = new(FakeVerifier)
