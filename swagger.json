{
  "swagger": "2.0",
  "info": {
    "description": "Hub API provides the frontend API for the Appvia Hub (hub.appvia.io)",
    "title": "Appvia Hub API",
    "contact": {
      "name": "Rohith Jayawardene",
      "url": "https://appvia.io",
      "email": "info@appvia.io"
    },
    "license": {
      "name": "GPLV2",
      "url": "http://mit.org"
    },
    "version": "0.0.1"
  },
  "paths": {
    "/api/v1alpha1/plans": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Returns all the classes available to initialized in the hub",
        "operationId": "findPlans",
        "responses": {
          "200": {
            "description": "A list of all the classes in the hub",
            "schema": {
              "$ref": "#/definitions/v1.PlanList"
            }
          },
          "default": {
            "description": "An generic API error containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/apiserver.Error"
            }
          }
        }
      }
    },
    "/api/v1alpha1/plans/{name}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Returns a specific class plan from the hub",
        "operationId": "findPlan",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the plan you wish to retrieve",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Contains the class definintion from the hub",
            "schema": {
              "$ref": "#/definitions/v1.Plan"
            }
          },
          "default": {
            "description": "An generic API error containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/apiserver.Error"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Used to create or update a plan in the hub",
        "operationId": "updatePlan",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the plan you wish to act upon",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "description": "The specification for the plan you are updating",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Plan"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contains the class definintion from the hub",
            "schema": {
              "$ref": "#/definitions/v1.Plan"
            }
          },
          "default": {
            "description": "An generic API error containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/apiserver.Error"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Used to delete a plan from the hub",
        "operationId": "deletePlan",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the plan you wish to act upon",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Contains the class definintion from the hub",
            "schema": {
              "$ref": "#/definitions/v1.Plan"
            }
          },
          "default": {
            "description": "An generic API error containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/apiserver.Error"
            }
          }
        }
      }
    },
    "/api/v1alpha1/teams": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Returns all the teams in the hub",
        "operationId": "listTeams",
        "responses": {
          "200": {
            "description": "A list of all the teams in the hub",
            "schema": {
              "$ref": "#/definitions/v1.TeamList"
            }
          },
          "default": {
            "description": "An generic API error containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/apiserver.Error"
            }
          }
        }
      }
    },
    "/api/v1alpha1/teams/invitation/{token}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Used to verify and handle the team invitation generated links",
        "operationId": "invitationSubmit",
        "parameters": [
          {
            "type": "string",
            "description": "The generated base64 invitation token which was provided from the team",
            "name": "token",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Indicates the generated link is valid and the user has been granted access"
          },
          "default": {
            "description": "An generic API error containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/apiserver.Error"
            }
          }
        }
      }
    },
    "/api/v1alpha1/teams/{team}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Return information related to the specific team in the hub",
        "operationId": "findTeam",
        "parameters": [
          {
            "type": "string",
            "description": "Is the name of the team you are acting within",
            "name": "team",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Contains the team definintion from the hub",
            "schema": {
              "$ref": "#/definitions/v1.Team"
            }
          },
          "default": {
            "description": "An generic API error containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/apiserver.Error"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Used to create or update a team in the hub",
        "operationId": "updateTeam",
        "parameters": [
          {
            "type": "string",
            "description": "Is the name of the team you are acting within",
            "name": "team",
            "in": "path",
            "required": true
          },
          {
            "description": "Contains the definition for a team in the hub",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Team"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contains the team definintion from the hub",
            "schema": {
              "$ref": "#/definitions/v1.Team"
            }
          },
          "304": {
            "description": "Indicates the request was processed but no changes applied",
            "schema": {
              "$ref": "#/definitions/v1.Team"
            }
          },
          "default": {
            "description": "An generic API error containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/apiserver.Error"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Used to delete a team from the hub",
        "operationId": "deleteTeam",
        "parameters": [
          {
            "type": "string",
            "description": "Is the name of the team you are acting within",
            "name": "team",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Contains the former team definition from the hub",
            "schema": {
              "$ref": "#/definitions/v1.Team"
            }
          },
          "406": {
            "description": "Indicates you cannot delete the team for one of more reasons",
            "schema": {
              "$ref": "#/definitions/apiserver.Error"
            }
          },
          "default": {
            "description": "An generic API error containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/apiserver.Error"
            }
          }
        }
      }
    },
    "/api/v1alpha1/teams/{team}/cloud/gke": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Is the used tor return a list of Google Container Engine clusters which thhe team has access",
        "operationId": "findClusters",
        "parameters": [
          {
            "type": "string",
            "description": "Is the name of the team you are acting within",
            "name": "team",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Contains the former team definition from the hub",
            "schema": {
              "$ref": "#/definitions/v1.Kubernetes"
            }
          },
          "default": {
            "description": "An generic API error containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/apiserver.Error"
            }
          }
        }
      }
    },
    "/api/v1alpha1/teams/{team}/cloud/gke/{name}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Is the used tor return a list of Google Container Engine clusters which thhe team has access",
        "operationId": "findCluster",
        "parameters": [
          {
            "type": "string",
            "description": "Is the name of the team you are acting within",
            "name": "team",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Is name the of the GKE cluster you are acting upon",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Contains the former team definition from the hub",
            "schema": {
              "$ref": "#/definitions/v1.Kubernetes"
            }
          },
          "default": {
            "description": "An generic API error containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/apiserver.Error"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Is used to provision or update a GKE cluster in the hub",
        "operationId": "findCluster",
        "parameters": [
          {
            "type": "string",
            "description": "Is the name of the team you are acting within",
            "name": "team",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Is name the of the GKE cluster you are acting upon",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Contains the former team definition from the hub",
            "schema": {
              "$ref": "#/definitions/v1.Kubernetes"
            }
          },
          "default": {
            "description": "An generic API error containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/apiserver.Error"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Is used to delete a managed GKE cluster from the hub",
        "operationId": "findCluster",
        "parameters": [
          {
            "type": "string",
            "description": "Is the name of the team you are acting within",
            "name": "team",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Is name the of the GKE cluster you are acting upon",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Contains the former team definition from the hub",
            "schema": {
              "$ref": "#/definitions/v1.Kubernetes"
            }
          },
          "default": {
            "description": "An generic API error containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/apiserver.Error"
            }
          }
        }
      }
    },
    "/api/v1alpha1/teams/{team}/clusters": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Used to return all team resources under the team",
        "operationId": "findClusters",
        "parameters": [
          {
            "type": "string",
            "description": "Is the name of the team you are acting within",
            "name": "team",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Contains the former team definition from the hub",
            "schema": {
              "$ref": "#/definitions/v1.KubernetesList"
            }
          },
          "default": {
            "description": "An generic API error containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/apiserver.Error"
            }
          }
        }
      }
    },
    "/api/v1alpha1/teams/{team}/clusters/{name}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Used to return the cluster definition from the hub",
        "operationId": "findCluster",
        "parameters": [
          {
            "type": "string",
            "description": "Is the name of the team you are acting within",
            "name": "team",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Contains the former team definition from the hub",
            "schema": {
              "$ref": "#/definitions/v1.Kubernetes"
            }
          },
          "default": {
            "description": "An generic API error containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/apiserver.Error"
            }
          }
        }
      }
    },
    "/api/v1alpha1/teams/{team}/invites/generate": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Used to generate a link which provides automatic membership of the team",
        "operationId": "inviteLink",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the team you are creating an invition link",
            "name": "team",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "1h",
            "description": "The expiration of the generated link",
            "name": "expire",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A generated URI which can be used to join a team",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "An generic API error containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/apiserver.Error"
            }
          }
        }
      }
    },
    "/api/v1alpha1/teams/{team}/invites/generate/{user}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Used to generate for a specific user to join a team",
        "operationId": "inviteLinkByUser",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the team you are creating an invition link",
            "name": "team",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The username of the user the link should be limited for",
            "name": "user",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A generated URI which users can use to join the team",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "An generic API error containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/apiserver.Error"
            }
          }
        }
      }
    },
    "/api/v1alpha1/teams/{team}/invites/user": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Used to return a list of all the users whom have pending invitations",
        "operationId": "listInvites",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the team you are pulling the invitations for",
            "name": "team",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A list of users whom have an invitation for the team",
            "schema": {
              "$ref": "#/definitions/v1.TeamInvitationList"
            }
          },
          "default": {
            "description": "An generic API error containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/apiserver.Error"
            }
          }
        }
      }
    },
    "/api/v1alpha1/teams/{team}/invites/user/{user}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Used to create an invitation for the team",
        "operationId": "inviteUser",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the team you are creating an invition",
            "name": "team",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the username of the user the invitation is for",
            "name": "user",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "1h",
            "description": "The expiration of the generated link",
            "name": "expire",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Indicates the team invitation for the user has been successful",
            "schema": {
              "$ref": "#/definitions/v1.TeamInvitation"
            }
          },
          "default": {
            "description": "An generic API error containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/apiserver.Error"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Used to remove a user invitation for the team",
        "operationId": "removeInvite",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the team you are deleting the invitation",
            "name": "team",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The username of the user whos invitation you are removing",
            "name": "user",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Indicates the team invitation has been successful removed"
          },
          "default": {
            "description": "An generic API error containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/apiserver.Error"
            }
          }
        }
      }
    },
    "/api/v1alpha1/teams/{team}/members": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Returns a list of user memberships in the team",
        "operationId": "findTeamMembers",
        "parameters": [
          {
            "type": "string",
            "description": "Is the name of the team you are acting within",
            "name": "team",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Contains a collection of team memberships for this team",
            "schema": {
              "$ref": "#/definitions/v1.TeamMemberList"
            }
          },
          "default": {
            "description": "An generic API error containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/apiserver.Error"
            }
          }
        }
      }
    },
    "/api/v1alpha1/teams/{team}/members/{user}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Used to add a user to the team via membership",
        "operationId": "addTeamMember",
        "parameters": [
          {
            "type": "string",
            "description": "Is the name of the team you are acting within",
            "name": "team",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Is the user you are adding to the team",
            "name": "user",
            "in": "path",
            "required": true
          },
          {
            "description": "The definition for the user in the team",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.TeamMember"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user has been successfully added to the team",
            "schema": {
              "$ref": "#/definitions/v1.TeamMember"
            }
          },
          "default": {
            "description": "An generic API error containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/apiserver.Error"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Used to remove team membership from the team",
        "operationId": "removeTeamMember",
        "parameters": [
          {
            "type": "string",
            "description": "Is the name of the team you are acting within",
            "name": "team",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Is the user you are removing to the team",
            "name": "user",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The user has been successfully removed from the team",
            "schema": {
              "$ref": "#/definitions/v1.TeamMember"
            }
          },
          "default": {
            "description": "An generic API error containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/apiserver.Error"
            }
          }
        }
      }
    },
    "/api/v1alpha1/users": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Returns all the users in the hub",
        "operationId": "findUsers",
        "responses": {
          "200": {
            "description": "A list of all the users in the hub",
            "schema": {
              "$ref": "#/definitions/v1.UserList"
            }
          },
          "default": {
            "description": "An generic API error containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/apiserver.Error"
            }
          }
        }
      }
    },
    "/api/v1alpha1/users/{user}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Return information related to the specific user in the hub",
        "operationId": "findUser",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the user you wish to retrieve",
            "name": "user",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Contains the user definintion from the hub",
            "schema": {
              "$ref": "#/definitions/v1.User"
            }
          },
          "default": {
            "description": "An generic API error containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/apiserver.Error"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Used to create or update a user in the hub",
        "operationId": "updateUser",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the user are updating or creating in the hub",
            "name": "user",
            "in": "path",
            "required": true
          },
          {
            "description": "The specification for a user in the hub",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contains the user definintion from the hub",
            "schema": {
              "$ref": "#/definitions/v1.User"
            }
          },
          "default": {
            "description": "An generic API error containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/apiserver.Error"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Used to delete a user from the hub",
        "operationId": "deleteUser",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the user are deleting from the hub",
            "name": "user",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Contains the former user definition from the hub",
            "schema": {
              "$ref": "#/definitions/v1.User"
            }
          },
          "default": {
            "description": "An generic API error containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/apiserver.Error"
            }
          }
        }
      }
    },
    "/api/v1alpha1/users/{user}/teams": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Returns a list of teams the user is a member of",
        "operationId": "findUserTeams",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the user whos team membership you wish to see",
            "name": "user",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Response is a team list container the teams the user is a member",
            "schema": {
              "$ref": "#/definitions/v1.UserList"
            }
          },
          "default": {
            "description": "An generic API error containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/apiserver.Error"
            }
          }
        }
      }
    },
    "/api/v1alpha1/whoami": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Returns information about who the user is and what teams they are a member",
        "operationId": "findWho",
        "responses": {
          "200": {
            "description": "A list of all the users in the hub",
            "schema": {
              "$ref": "#/definitions/types.WhoAmI"
            }
          },
          "default": {
            "description": "An generic API error containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/apiserver.Error"
            }
          }
        }
      }
    },
    "/healthz": {
      "get": {
        "summary": "Used to start the authorization flow for user authentication",
        "operationId": "healthHandler",
        "responses": {
          "200": {
            "description": "OK"
          },
          "default": {
            "description": "An generic API error containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/apiserver.Error"
            }
          }
        }
      }
    },
    "/oauth/authorize": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Used to start the authorization flow for user authentication",
        "operationId": "authorizerHandler",
        "parameters": [
          {
            "type": "string",
            "description": "The rediection url, i.e. the location to redirect post",
            "name": "redirect_url",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "default": {
            "description": "An generic API error containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/apiserver.Error"
            }
          }
        }
      }
    },
    "/oauth/callback": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Used to handle the authorization callback from the identity provider",
        "operationId": "callbackHandler",
        "parameters": [
          {
            "type": "string",
            "description": "The authorization code returned from the identity provider",
            "name": "code",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "The state parameter which was passed on authorization request",
            "name": "state",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "default": {
            "description": "An generic API error containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/apiserver.Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "apiserver.Error": {
      "required": [
        "code",
        "detail",
        "message",
        "uri",
        "verb"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "detail": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "uri": {
          "type": "string"
        },
        "verb": {
          "type": "string"
        }
      }
    },
    "types.WhoAmI": {
      "properties": {
        "email": {
          "type": "string"
        },
        "teams": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "username": {
          "type": "string"
        }
      }
    },
    "v1.ClusterUser": {
      "required": [
        "username",
        "roles"
      ],
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "username": {
          "type": "string"
        }
      }
    },
    "v1.Component": {
      "properties": {
        "detail": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "v1.Condition": {
      "required": [
        "message",
        "detail"
      ],
      "properties": {
        "detail": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "v1.Initializer": {
      "description": "Initializer is information about an initializer that has not yet completed.",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "name of the process that is responsible for initializing this object.",
          "type": "string"
        }
      }
    },
    "v1.Initializers": {
      "description": "Initializers tracks the progress of initialization.",
      "required": [
        "pending"
      ],
      "properties": {
        "pending": {
          "description": "Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Initializer"
          }
        },
        "result": {
          "description": "If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.",
          "$ref": "#/definitions/v1.Status"
        }
      }
    },
    "v1.Kubernetes": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1.KubernetesSpec"
        },
        "status": {
          "$ref": "#/definitions/v1.KubernetesStatus"
        }
      }
    },
    "v1.KubernetesList": {
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Kubernetes"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ListMeta"
        }
      }
    },
    "v1.KubernetesSpec": {
      "required": [
        "domain"
      ],
      "properties": {
        "clusterUsers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.ClusterUser"
          }
        },
        "defaultTeamRole": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "enabledDefaultTrafficBlock": {
          "type": "boolean"
        },
        "inheritTeamMembers": {
          "type": "boolean"
        },
        "provider": {
          "$ref": "#/definitions/v1.Ownership"
        },
        "proxyImage": {
          "type": "string"
        }
      }
    },
    "v1.KubernetesStatus": {
      "required": [
        "status"
      ],
      "properties": {
        "adminToken": {
          "$ref": "#/definitions/v1.Secret"
        },
        "apiEndpoint": {
          "type": "string"
        },
        "caCertificate": {
          "type": "string"
        },
        "components": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Component"
          }
        },
        "endpoint": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "v1.ListMeta": {
      "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
      "properties": {
        "continue": {
          "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
          "type": "string"
        },
        "remainingItemCount": {
          "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.\n\nThis field is alpha and can be changed or removed without notice.",
          "type": "integer",
          "format": "int64"
        },
        "resourceVersion": {
          "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "selfLink is a URL representing this object. Populated by the system. Read-only.",
          "type": "string"
        }
      }
    },
    "v1.ManagedFieldsEntry": {
      "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
          "type": "string"
        },
        "fields": {
          "description": "Fields identifies a set of fields.",
          "type": "string"
        },
        "manager": {
          "description": "Manager is an identifier of the workflow managing these fields.",
          "type": "string"
        },
        "operation": {
          "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
          "type": "string"
        },
        "time": {
          "description": "Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'",
          "type": "string"
        }
      }
    },
    "v1.ObjectMeta": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "clusterName": {
          "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.",
          "type": "string"
        },
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "type": "string"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
          "type": "integer",
          "format": "int64"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "type": "string"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency",
          "type": "string"
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
          "type": "integer",
          "format": "int64"
        },
        "initializers": {
          "description": "An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n\nWhen an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n\nDEPRECATED - initializers are an alpha field and will be removed in v1.15.",
          "$ref": "#/definitions/v1.Initializers"
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "managedFields": {
          "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.\n\nThis field is alpha and can be changed or removed without notice.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.ManagedFieldsEntry"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
          "type": "string"
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.OwnerReference"
          }
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.",
          "type": "string"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      }
    },
    "v1.OwnerReference": {
      "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
      "required": [
        "apiVersion",
        "kind",
        "name",
        "uid"
      ],
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string"
        },
        "blockOwnerDeletion": {
          "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
          "type": "boolean"
        },
        "controller": {
          "description": "If true, this reference points to the managing controller.",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      }
    },
    "v1.Ownership": {
      "required": [
        "group",
        "version",
        "kind",
        "namespace",
        "name"
      ],
      "properties": {
        "group": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1.Plan": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1.PlanSpec"
        },
        "status": {
          "$ref": "#/definitions/v1.PlanStatus"
        }
      }
    },
    "v1.PlanList": {
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Plan"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ListMeta"
        }
      }
    },
    "v1.PlanSpec": {
      "required": [
        "values"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "summary": {
          "type": "string"
        },
        "values": {
          "type": "string"
        }
      }
    },
    "v1.PlanStatus": {
      "required": [
        "conditions",
        "status"
      ],
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Condition"
          }
        },
        "status": {
          "type": "string"
        }
      }
    },
    "v1.Secret": {
      "description": "Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "data": {
          "description": "Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "stringData": {
          "description": "stringData allows specifying non-binary secret data in string form. It is provided as a write-only convenience method. All keys and values are merged into the data field on write, overwriting any existing values. It is never output when reading from the API.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "description": "Used to facilitate programmatic handling of secret data.",
          "type": "string"
        }
      }
    },
    "v1.Status": {
      "description": "Status is a return value for calls that don't return other objects.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "code": {
          "description": "Suggested HTTP return code for this status, 0 if not set.",
          "type": "integer",
          "format": "int32"
        },
        "details": {
          "description": "Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.",
          "$ref": "#/definitions/v1.StatusDetails"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "message": {
          "description": "A human-readable description of the status of this operation.",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "$ref": "#/definitions/v1.ListMeta"
        },
        "reason": {
          "description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.",
          "type": "string"
        },
        "status": {
          "description": "Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
          "type": "string"
        }
      }
    },
    "v1.StatusCause": {
      "description": "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
      "properties": {
        "field": {
          "description": "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\"",
          "type": "string"
        },
        "message": {
          "description": "A human-readable description of the cause of the error.  This field may be presented as-is to a reader.",
          "type": "string"
        },
        "reason": {
          "description": "A machine-readable description of the cause of the error. If this value is empty there is no information available.",
          "type": "string"
        }
      }
    },
    "v1.StatusDetails": {
      "description": "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
      "properties": {
        "causes": {
          "description": "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.StatusCause"
          }
        },
        "group": {
          "description": "The group attribute of the resource associated with the status StatusReason.",
          "type": "string"
        },
        "kind": {
          "description": "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).",
          "type": "string"
        },
        "retryAfterSeconds": {
          "description": "If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.",
          "type": "integer",
          "format": "int32"
        },
        "uid": {
          "description": "UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      }
    },
    "v1.Team": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1.TeamSpec"
        },
        "status": {
          "$ref": "#/definitions/v1.TeamStatus"
        }
      }
    },
    "v1.TeamInvitation": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1.TeamInvitationSpec"
        },
        "status": {
          "$ref": "#/definitions/v1.TeamInvitationStatus"
        }
      }
    },
    "v1.TeamInvitationList": {
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.TeamInvitation"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ListMeta"
        }
      }
    },
    "v1.TeamInvitationSpec": {
      "required": [
        "username",
        "team"
      ],
      "properties": {
        "team": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "v1.TeamInvitationStatus": {
      "required": [
        "conditions",
        "status"
      ],
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Condition"
          }
        },
        "status": {
          "type": "string"
        }
      }
    },
    "v1.TeamList": {
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Team"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ListMeta"
        }
      }
    },
    "v1.TeamMember": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1.TeamMemberSpec"
        },
        "status": {
          "$ref": "#/definitions/v1.TeamMemberStatus"
        }
      }
    },
    "v1.TeamMemberList": {
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.TeamMember"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ListMeta"
        }
      }
    },
    "v1.TeamMemberSpec": {
      "required": [
        "roles",
        "team",
        "username"
      ],
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "team": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "v1.TeamMemberStatus": {
      "required": [
        "conditions",
        "status"
      ],
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Condition"
          }
        },
        "status": {
          "type": "string"
        }
      }
    },
    "v1.TeamSpec": {
      "required": [
        "summary",
        "description"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "summary": {
          "type": "string"
        }
      }
    },
    "v1.TeamStatus": {
      "required": [
        "conditions",
        "status"
      ],
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Condition"
          }
        },
        "status": {
          "type": "string"
        }
      }
    },
    "v1.User": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1.UserSpec"
        },
        "status": {
          "$ref": "#/definitions/v1.UserStatus"
        }
      }
    },
    "v1.UserList": {
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.User"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ListMeta"
        }
      }
    },
    "v1.UserSpec": {
      "required": [
        "username"
      ],
      "properties": {
        "disabled": {
          "type": "boolean"
        },
        "email": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "v1.UserStatus": {
      "required": [
        "conditions",
        "status"
      ],
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Condition"
          }
        },
        "status": {
          "type": "string"
        }
      }
    }
  }
}
